{"version":3,"file":"185.js","mappings":"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","sources":["webpack://@patternfly-labs/react-form-wizard/./examples/Routes.tsx","webpack://@patternfly-labs/react-form-wizard/./src/contexts/FormWizardContext.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/YamlHighlighter.tsx","webpack://@patternfly-labs/react-form-wizard/./src/contexts/FormWizardItemContext.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardInput.ts","webpack://@patternfly-labs/react-form-wizard/./src/FormWizard.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/FormWizardLabelHelp.tsx","webpack://@patternfly-labs/react-form-wizard/./src/FormWizardSection.tsx","webpack://@patternfly-labs/react-form-wizard/./src/FormWizardStep.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/FormWizardFieldGroup.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardArray.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/FormWizardIndented.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardCheckbox.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardHidden.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardKeyValue.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardLabels.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardRadio.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardInputLabel.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardSelect.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardSelector.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardStringArray.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardTextDetail.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/ClearInputButton.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/PasteInputButton.tsx","webpack://@patternfly-labs/react-form-wizard/./src/components/ShowSecretsButton.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardTextInput.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardTiles.tsx","webpack://@patternfly-labs/react-form-wizard/./src/inputs/FormWizardTimeRange.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Ansible/AnsibleWizard.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Ansible/AnsibleExample.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Application/logos/ArgoIcon.svg","webpack://@patternfly-labs/react-form-wizard/./examples/Application/logos/HelmIcon.svg","webpack://@patternfly-labs/react-form-wizard/./examples/Application/logos/ObjectStore.svg","webpack://@patternfly-labs/react-form-wizard/./examples/Application/logos/SubscriptionIcon.svg","webpack://@patternfly-labs/react-form-wizard/./examples/Application/AppForm.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Cluster/ClusterForm.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/components/Results.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Credentials/CredentialsForm.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Inputs/InputsWizard.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/Policy/templates/index.ts","webpack://@patternfly-labs/react-form-wizard/./examples/Policy/PolicyForm.tsx","webpack://@patternfly-labs/react-form-wizard/./examples/App.tsx"],"sourcesContent":["export enum RouteE {\n    Home = '.',\n    Ansible = '?route=ansible',\n    Application = '?route=application',\n    Cluster = '?route=cluster',\n    Credentials = '?route=credentials',\n    Policy = '?route=policy',\n    Inputs = '?route=inputs',\n    Results = '?route=results',\n}\n","import { createContext } from 'react'\n\nexport enum InputMode {\n    Wizard,\n    Form,\n    Details,\n}\n\nexport enum InputEditMode {\n    Create,\n    Edit,\n}\n\n/**\n * FormWizardContext is the root level context of an InputForm and represents the forms data.\n */\nexport interface IFormWizardContext {\n    /**\n     * updateContext updates the input context state.\n     * This should be called by the input components when they update state.\n     */\n    updateContext: () => void\n\n    mode: InputMode\n\n    editMode: InputEditMode\n\n    showValidation: boolean\n    setShowValidation: (show: boolean) => void\n\n    onSubmit?: (data: object) => Promise<void>\n}\n\n/**\n * FormWizardContext is the root level context of an InputForm and represents the forms data.\n */\nexport const FormWizardContext = createContext<IFormWizardContext>({\n    updateContext: () => {\n        /* Do nothing. */\n    },\n    mode: InputMode.Wizard,\n    editMode: InputEditMode.Create,\n    showValidation: true,\n    setShowValidation: () => {\n        /* Do nothing. */\n    },\n})\n","import { Fragment } from 'react'\n\nexport function YamlHighlighter(props: { yaml: string }) {\n    return (\n        <pre>\n            <small>\n                {props.yaml.split('\\n').map((line, index) => {\n                    if (line === '---') {\n                        return (\n                            <div key={index} style={{ color: '#a0a' }}>\n                                {line}\n                            </div>\n                        )\n                    }\n                    const parts = line.split(':')\n                    if (parts[0] === '') return <Fragment key={index} />\n                    if (parts.length === 1) {\n                        return (\n                            <div key={index} style={{ color: '#04c' }}>\n                                {parts[0]}\n                            </div>\n                        )\n                    }\n                    return (\n                        <div key={index} style={{ color: '#04c' }}>\n                            {parts[0]}\n                            <span style={{ color: '#999' }}>:</span>\n                            <span style={{ color: '#c50' }}>{parts[1]}</span>\n                        </div>\n                    )\n                })}\n                {/* <textarea\n                    style={{\n                        position: 'absolute',\n                        top: 24,\n                        left: 34,\n                        height: '100%',\n                        width: '100%',\n                        opacity: 0.5,\n                        margin: 0,\n                        padding: 0,\n                        border: 0,\n                        backgroundColor: 'transparent',\n                        whiteSpace: 'pre',\n                        overflowWrap: 'normal',\n                        overflowX: 'hidden',\n                        color: 'transparent',\n                        caretColor: 'black',\n                    }}\n                    value={yaml}\n                    onChange={(e) => setYaml(e.target.value)}\n                /> */}\n            </small>\n        </pre>\n    )\n}\n","import { createContext } from 'react'\n\n/**\n * FormWizardItemContext is the item context that input components should be editing.\n */\nexport const FormWizardItemContext = createContext<object>({})\n","import get from 'get-value'\nimport { Children, isValidElement, ReactNode, useContext } from 'react'\nimport set from 'set-value'\nimport { FormWizardContext, IFormWizardContext } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport type InputCommonProps<ValueT = any> = {\n    id: string\n    path?: string\n    hidden?: (item: any) => boolean\n    validation?: (value: ValueT) => string | undefined\n    required?: boolean\n    readonly?: boolean\n    disabled?: boolean\n\n    label: string\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n}\n\nexport function useInputValue(\n    props: Pick<InputCommonProps, 'id' | 'path'>,\n    defaultValue: any\n): [value: any, setValue: (value: any) => void] {\n    const item = useContext(FormWizardItemContext)\n    const formWizardContext = useContext(FormWizardContext)\n    const path = props.path ?? props.id\n    const value = get(item, path) ?? defaultValue\n    const setValue = (value: any) => {\n        inputSetValue(props, item, value, formWizardContext)\n    }\n    return [value, setValue]\n}\n\nexport function inputGetValue(props: Pick<InputCommonProps, 'id' | 'path'>, item: object) {\n    const path = props.path ?? props.id\n    const value = get(item, path) ?? null\n    return value\n}\n\nexport function inputSetValue<T = any>(\n    props: Pick<InputCommonProps, 'id' | 'path'>,\n    item: object,\n    value: T,\n    formWizardContext: IFormWizardContext\n) {\n    const path = props.path ?? props.id\n    set(item, path, value)\n    formWizardContext.updateContext()\n}\n\nexport function useInputValidation(props: Pick<InputCommonProps, 'id' | 'path' | 'label' | 'required' | 'validation'>) {\n    const item = useContext(FormWizardItemContext)\n    const formWizardContext = useContext(FormWizardContext)\n\n    const value = inputGetValue(props, item)\n    let error: string | undefined = undefined\n    let validated: 'error' | undefined = undefined\n    if (formWizardContext.showValidation) {\n        if (props.required && !value) {\n            error = `${props.label} is required`\n        } else if (props.validation) {\n            error = props.validation(value)\n        }\n        validated = error ? 'error' : undefined\n    }\n    return { validated, error }\n}\n\nexport function useInputHidden(props: { hidden?: (item: any) => boolean }) {\n    const item = useContext(FormWizardItemContext)\n    const hidden = props.hidden ? props.hidden(item) : false\n    return hidden\n}\n\nexport function isFormWizardHiddenProps(props: unknown, item: unknown) {\n    if (!props) return false\n\n    const hidden = (props as InputCommonProps).hidden\n    if (typeof hidden === 'boolean') return hidden\n    if (typeof hidden === 'function') {\n        try {\n            const result = hidden(item)\n            if (typeof result === 'boolean') return result\n        } catch {\n            // Do nothing\n        }\n    }\n\n    const children = (props as { children?: ReactNode }).children\n\n    if (typeof children === 'function') {\n        // DO NOTHING\n    } else if (children) {\n        let allChildrenHidden = true\n        Children.forEach(children, (child) => {\n            if (!allChildrenHidden) return\n            if (!isValidElement(child)) {\n                allChildrenHidden = false\n                return\n            }\n            if (!isFormWizardHiddenProps(child.props, item)) {\n                allChildrenHidden = false\n            }\n        })\n        return allChildrenHidden\n    }\n    return false\n}\n\nexport function hasValidationErrorsProps(props: InputCommonProps, item: unknown): boolean {\n    if (!props) return false\n    if (isFormWizardHiddenProps(props, item)) return false\n\n    const id = props.id\n    const path = props.path ?? id\n\n    if (path) {\n        if (item && typeof item === 'object') {\n            const value = get(item, path) as unknown\n\n            const required = props.required\n            if (required && !value) {\n                return true\n            }\n\n            const validation = props.validation\n            if (typeof validation === 'function') {\n                try {\n                    const result = validation(value)\n                    if (typeof result === 'string') return true\n                } catch {\n                    // Do nothing\n                }\n            }\n        }\n    }\n\n    const children = (props as { children?: ReactNode }).children\n    if (children) {\n        let anyChildrenHasValidationErrors = false\n        Children.forEach(children, (child) => {\n            if (anyChildrenHasValidationErrors) return\n            if (!isValidElement(child)) return\n            if (isFormWizardHiddenProps(child.props, item)) return\n            if (hasValidationErrorsProps(child.props as InputCommonProps, item)) {\n                anyChildrenHasValidationErrors = true\n            }\n        })\n        return anyChildrenHasValidationErrors\n    }\n\n    return false\n}\n\nexport function inputHasValue(props: unknown, item: unknown) {\n    const id = (props as InputCommonProps).id\n    const path = (props as InputCommonProps).path ?? id\n    if (path) {\n        const value = get(item as object, path)\n        if (value === undefined) return false\n        if (typeof value === 'string') {\n            return value !== '' && value !== undefined\n        }\n        if (typeof value === 'number') {\n            return value !== 0\n        }\n        if (typeof value === 'boolean') {\n            return true\n        }\n        if (Array.isArray(value)) {\n            return value.length > 0\n        }\n    }\n\n    const children = (props as { children?: ReactNode }).children\n    if (children) {\n        let anyChildHasValue = false\n        Children.forEach(children, (child) => {\n            if (anyChildHasValue) return\n            if (!isValidElement(child)) return\n            if (isFormWizardHiddenProps(child.props, item)) return\n            if (inputHasValue(child.props, item)) {\n                anyChildHasValue = true\n            }\n        })\n        return anyChildHasValue\n    }\n    return false\n}\n\nexport function lowercaseFirst(label: string) {\n    if (label) {\n        label = label[0].toLowerCase() + label.substr(1)\n    }\n    return label\n}\n","import {\n    ActionGroup,\n    ActionList,\n    ActionListGroup,\n    ActionListItem,\n    Alert,\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    DescriptionList,\n    Drawer,\n    DrawerColorVariant,\n    DrawerContent,\n    DrawerContentBody,\n    DrawerPanelContent,\n    Flex,\n    Form,\n    FormAlert,\n    Page,\n    PageSection,\n    PageSectionTypes,\n    Split,\n    SplitItem,\n    Stack,\n    Switch,\n    Tab,\n    Tabs,\n    TabTitleText,\n    Text,\n    Title,\n    Wizard,\n    WizardStep,\n} from '@patternfly/react-core'\nimport Handlebars, { HelperOptions } from 'handlebars'\nimport { Children, isValidElement, ReactNode, useCallback, useContext, useState } from 'react'\nimport YAML from 'yaml'\nimport { FormWizardStep } from '.'\nimport { YamlHighlighter } from './components/YamlHighlighter'\nimport { FormWizardContext, InputEditMode, InputMode } from './contexts/FormWizardContext'\nimport { FormWizardItemContext } from './contexts/FormWizardItemContext'\nimport { hasValidationErrorsProps, InputCommonProps, isFormWizardHiddenProps } from './inputs/FormWizardInput'\n\nHandlebars.registerHelper('if_eq', function (this: unknown, arg1: string, arg2: string, options: HelperOptions) {\n    return arg1 == arg2 ? options.fn(this) : options.inverse(this)\n})\n\nHandlebars.registerHelper('if_ne', function (this: unknown, arg1: string, arg2: string, options: HelperOptions) {\n    return arg1 !== arg2 ? options.fn(this) : options.inverse(this)\n})\n\nexport type FormSubmit = (data: object) => Promise<void>\n\nexport function FormWizardPage(props: {\n    title: string\n    description?: string\n    children: ReactNode\n    defaultData?: object\n    template?: string\n    breadcrumb?: { label: string; to?: string }[]\n    onSubmit?: FormSubmit\n}) {\n    const [template] = useState(() => (props.template ? Handlebars.compile(props.template) : undefined))\n    const [data, setData] = useState(props.defaultData ?? {})\n    const [devMode, setDevMode] = useState(false)\n    const [isForm, setIsForm] = useState(false)\n    const [showValidation, setShowValidation] = useState(false)\n\n    const [drawerExpanded, setDrawerExpanded] = useState(localStorage.getItem('yaml') === 'true')\n    const toggleDrawerExpanded = useCallback(() => {\n        setDrawerExpanded((drawerExpanded) => {\n            localStorage.setItem('yaml', (!drawerExpanded).toString())\n            return !drawerExpanded\n        })\n    }, [])\n\n    const mode = isForm ? InputMode.Form : InputMode.Wizard\n    return (\n        <Page\n            breadcrumb={\n                props.breadcrumb && (\n                    <Breadcrumb>\n                        {props.breadcrumb.map((crumb) => (\n                            <BreadcrumbItem key={crumb.label} to={crumb.to}>\n                                {crumb.label}\n                            </BreadcrumbItem>\n                        ))}\n                    </Breadcrumb>\n                )\n            }\n            isBreadcrumbGrouped\n            additionalGroupedContent={\n                <PageSection variant=\"light\">\n                    <Flex alignItems={{ default: 'alignItemsCenter' }} wrap=\"noWrap\" style={{ flexWrap: 'nowrap', gap: 16 }}>\n                        <Title headingLevel=\"h1\">{props.title}</Title>\n                        <Switch label=\"YAML\" isChecked={drawerExpanded} onChange={() => toggleDrawerExpanded()} />\n                        {process.env.NODE_ENV === 'development' && (\n                            <Switch label=\"FORM\" isChecked={isForm} onChange={() => setIsForm(!isForm)} />\n                        )}\n                        {process.env.NODE_ENV === 'development' && props.template && (\n                            <Switch label=\"DEV\" isChecked={devMode} onChange={() => setDevMode(!devMode)} />\n                        )}\n                    </Flex>\n                    {props.description && <Text component=\"small\">{props.description}</Text>}\n                </PageSection>\n            }\n            groupProps={{ sticky: 'top' }}\n        >\n            {/* <Drawer isExpanded={drawerExpanded} isInline={drawerInline}> */}\n            <Drawer isExpanded={drawerExpanded} isInline>\n                <DrawerContent\n                    panelContent={\n                        <FormWizardPageDrawer data={data} template={template} templateString={props.template} devMode={devMode} />\n                    }\n                >\n                    <DrawerContentBody>\n                        <PageSection\n                            variant=\"light\"\n                            style={{ height: '100%' }}\n                            type={mode === InputMode.Wizard ? PageSectionTypes.wizard : PageSectionTypes.default}\n                            isWidthLimited\n                        >\n                            <FormWizardContext.Provider\n                                value={{\n                                    updateContext: () => setData(JSON.parse(JSON.stringify(data)) as object),\n                                    mode,\n                                    editMode: InputEditMode.Create,\n                                    showValidation,\n                                    setShowValidation,\n                                    onSubmit: props.onSubmit,\n                                }}\n                            >\n                                <FormWizardItemContext.Provider value={data}>\n                                    {mode === InputMode.Wizard ? (\n                                        <FormWizardWizardMode template={template} data={data}>\n                                            {props.children}\n                                        </FormWizardWizardMode>\n                                    ) : (\n                                        <FormWizardFormMode>{props.children}</FormWizardFormMode>\n                                    )}\n                                </FormWizardItemContext.Provider>\n                            </FormWizardContext.Provider>\n                        </PageSection>\n                    </DrawerContentBody>\n                </DrawerContent>\n            </Drawer>\n        </Page>\n    )\n}\n\nfunction FormWizardPageDrawer(props: { data: unknown; devMode: boolean; template?: HandlebarsTemplateDelegate; templateString?: string }) {\n    const [activeKey, setActiveKey] = useState<number | string>(0)\n\n    return (\n        <DrawerPanelContent isResizable={true} colorVariant={DrawerColorVariant.light200} defaultSize=\"50%\">\n            {props.template && props.devMode ? (\n                <div style={{ height: '100%' }}>\n                    <Tabs\n                        activeKey={activeKey}\n                        onSelect={(_event, tabIndex) => setActiveKey(tabIndex)}\n                        isBox\n                        variant=\"light300\"\n                        isFilled\n                        style={{ backgroundColor: 'white' }}\n                    >\n                        <Tab eventKey={0} title={<TabTitleText>Yaml</TabTitleText>}>\n                            <PageSection>\n                                <YamlHighlighter yaml={props.template(props.data)} />\n                            </PageSection>\n                        </Tab>\n                        <Tab eventKey={2} title={<TabTitleText>Data</TabTitleText>}>\n                            <PageSection>\n                                <YamlHighlighter yaml={YAML.stringify(props.data)} />\n                            </PageSection>\n                        </Tab>\n                    </Tabs>\n                </div>\n            ) : (\n                <PageSection>\n                    <YamlHighlighter yaml={props.template ? props.template(props.data) : YAML.stringify(props.data)} />\n                </PageSection>\n            )}\n        </DrawerPanelContent>\n    )\n}\n\nexport function FormWizardFormMode(props: { children: ReactNode }) {\n    return (\n        <Form>\n            {props.children}\n            <ActionGroup>\n                <Stack hasGutter style={{ width: '100%' }}>\n                    {/* <Alert isInline variant=\"danger\" title=\"Error\">\n                                                    Details\n                                                </Alert> */}\n                    <ActionList>\n                        <ActionListGroup>\n                            <ActionListItem>\n                                <Button\n                                    id=\"next\"\n                                    // onClick={() => {\n                                    //     setShowFormErrors(true)\n                                    //     if (!formHasErrors(formData)) {\n                                    //         try {\n                                    //             const result = formData.submit()\n                                    //             if ((result as unknown) instanceof Promise) {\n                                    //                 setSubmitText(formData.submittingText)\n                                    //                 ;(result as unknown as Promise<void>).catch(\n                                    //                     (err) => {\n                                    //                         setSubmitError(err.message)\n                                    //                         setSubmitText(formData.submitText)\n                                    //                     }\n                                    //                 )\n                                    //             }\n                                    //         } catch (err) {\n                                    //             setSubmitError(err.message)\n                                    //         }\n                                    //     }\n                                    // }}\n                                    variant=\"primary\"\n                                    // isDisabled={\n                                    //     (showFormErrors && formHasErrors(formData)) ||\n                                    //     isSubmitting\n                                    // }\n                                    // isLoading={isSubmitting}\n                                >\n                                    Submit\n                                </Button>\n                            </ActionListItem>\n                            <ActionListItem>\n                                <Button\n                                    id=\"cancel\"\n                                    variant=\"secondary\"\n                                    // onClick={formData.cancel}\n                                    // isDisabled={isSubmitting}\n                                >\n                                    Cancel\n                                </Button>\n                            </ActionListItem>\n                        </ActionListGroup>\n                    </ActionList>\n                </Stack>\n            </ActionGroup>\n        </Form>\n    )\n}\n\nexport function FormWizardWizardMode(props: { data: object; children: ReactNode; template?: HandlebarsTemplateDelegate }) {\n    const steps: WizardStep[] = []\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    let formHasValidationErrors = false\n    Children.forEach(props.children, (child) => {\n        if (!isValidElement(child)) return\n        if (child.type !== FormWizardStep) return\n        if (isFormWizardHiddenProps(child.props, item)) return\n\n        let color: string | undefined = undefined\n        if (hasValidationErrorsProps(child.props as InputCommonProps, item)) {\n            if (formWizardContext.showValidation) {\n                color = '#C9190B'\n            }\n            formHasValidationErrors = true\n        }\n\n        const label = (child.props as { label: ReactNode }).label\n        if (label) {\n            steps.push({\n                name: (\n                    <Split style={{ color: color }}>\n                        <SplitItem>{label}</SplitItem>\n                    </Split>\n                ),\n                component: child,\n            })\n        }\n    })\n\n    if (formHasValidationErrors) {\n        steps.push({\n            name: 'Summary',\n            component: (\n                <Stack hasGutter>\n                    <FormAlert style={{ paddingBottom: 16 }}>\n                        <Alert variant=\"danger\" title=\"Fix validation errors.\" isInline isPlain />\n                    </FormAlert>\n                    <FormWizardDetailsMode>{props.children}</FormWizardDetailsMode>\n                </Stack>\n            ),\n            nextButtonText: 'Submit',\n            enableNext: false,\n        })\n    } else {\n        steps.push({\n            name: 'Summary',\n            component: <FormWizardDetailsMode>{props.children}</FormWizardDetailsMode>,\n            nextButtonText: 'Submit',\n        })\n    }\n\n    const stepChange = useCallback(\n        (step) => {\n            if ((step as { name: string }).name === 'Summary') {\n                formWizardContext.setShowValidation(true)\n            }\n        },\n        [formWizardContext]\n    )\n\n    return (\n        <Wizard\n            steps={steps}\n            onNext={stepChange}\n            onGoToStep={stepChange}\n            onSave={() => {\n                if (props.template) {\n                    const data = props.template(props.data)\n                    void formWizardContext.onSubmit?.(YAML.parse(data))\n                } else {\n                    void formWizardContext.onSubmit?.(props.data)\n                }\n            }}\n        />\n    )\n}\n\nexport function FormWizardDetailsMode(props: { children: ReactNode }) {\n    const formWizardContext = useContext(FormWizardContext)\n    return (\n        <FormWizardContext.Provider value={{ ...formWizardContext, ...{ mode: InputMode.Details } }}>\n            <DescriptionList isHorizontal>{props.children}</DescriptionList>\n        </FormWizardContext.Provider>\n    )\n}\n","import { Popover } from '@patternfly/react-core/dist/js/components//Popover'\nimport { Button } from '@patternfly/react-core/dist/js/components/Button'\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon'\nimport { Fragment } from 'react'\n\nexport function FormWizardLabelHelp(props: { id: string; labelHelp?: string; labelHelpTitle?: string }): JSX.Element {\n    return props.labelHelp ? (\n        <Popover id={`${props.id}-label-help-popover`} headerContent={props.labelHelpTitle} bodyContent={props.labelHelp}>\n            <Button\n                variant=\"plain\"\n                id={`${props.id}-label-help-button`}\n                aria-label=\"More info\"\n                onClick={(e) => e.preventDefault()}\n                className=\"pf-c-form__group-label-help\"\n            >\n                <HelpIcon noVerticalAlign />\n            </Button>\n        </Popover>\n    ) : (\n        <Fragment />\n    )\n}\n","import { DescriptionList, FormSection, Split, Stack, Text, Title } from '@patternfly/react-core'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport { FormWizardLabelHelp } from './components/FormWizardLabelHelp'\nimport { FormWizardContext, InputMode } from './contexts/FormWizardContext'\nimport { FormWizardItemContext } from './contexts/FormWizardItemContext'\nimport { inputHasValue, isFormWizardHiddenProps } from './inputs/FormWizardInput'\n\ninterface FormWizardSectionProps {\n    label: string\n    labelHelp?: string\n    labelHelpTitle?: string\n    id?: string\n    prompt?: string\n    description?: string\n    children: ReactNode\n    hidden?: (item: any) => boolean\n}\n\nexport function FormWizardSection(props: FormWizardSectionProps) {\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    let label = props.label\n    if (formWizardContext.mode == InputMode.Wizard) {\n        if (props.prompt) {\n            label = props.prompt\n        }\n    }\n\n    const hidden = isFormWizardHiddenProps(props, item)\n    if (hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        if (!inputHasValue(props, item)) {\n            return <Fragment />\n        }\n        return (\n            <Fragment>\n                <Title headingLevel=\"h2\">{label}</Title>\n                <DescriptionList isHorizontal isCompact style={{ paddingLeft: 16, paddingBottom: 16, paddingRight: 16 }}>\n                    {props.children}\n                </DescriptionList>\n            </Fragment>\n        )\n    }\n\n    return (\n        <FormSection id={props.id}>\n            <Stack>\n                <Split>\n                    <Title headingLevel=\"h2\">{label}</Title>\n                    {props.id && <FormWizardLabelHelp id={props.id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />}\n                </Split>\n                {props.description && <Text component=\"small\">{props.description}</Text>}\n            </Stack>\n            {props.children}\n        </FormSection>\n    )\n}\n","import { Form } from '@patternfly/react-core'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport { FormWizardContext, InputMode } from './contexts/FormWizardContext'\n\nexport function FormWizardStep(props: { label: string; children: ReactNode; hidden?: (item: any) => boolean }) {\n    const formWizardContext = useContext(FormWizardContext)\n\n    switch (formWizardContext.mode) {\n        case InputMode.Wizard:\n            return <Form>{props.children}</Form>\n        default:\n            return <Fragment>{props.children}</Fragment>\n    }\n}\n","import { FormFieldGroupExpandableProps } from '@patternfly/react-core'\nimport { InternalFormFieldGroup } from '@patternfly/react-core/dist/js/components/Form/InternalFormFieldGroup'\nimport './FormWizardFieldGroup.css'\n\nexport type FormWizardFieldGroupProps = FormFieldGroupExpandableProps & { setIsExpanded: (expanded: boolean) => void }\nexport function FormWizardFieldGroup(props: FormWizardFieldGroupProps) {\n    const { children, header, isExpanded, setIsExpanded, toggleAriaLabel, ...extraProps } = props\n    return (\n        <InternalFormFieldGroup\n            className=\"input-field-group\"\n            header={!isExpanded && header}\n            isExpandable\n            isExpanded={props.isExpanded}\n            toggleAriaLabel={toggleAriaLabel}\n            onToggle={() => setIsExpanded(!props.isExpanded)}\n            {...extraProps}\n        >\n            {children}\n        </InternalFormFieldGroup>\n    )\n}\n","import {\n    Alert,\n    Button,\n    DataList,\n    DataListCell,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    DescriptionListDescription,\n    Divider,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    FormAlert,\n    FormFieldGroupHeader,\n    Stack,\n} from '@patternfly/react-core'\nimport { ArrowDownIcon, ArrowUpIcon, CaretDownIcon, PlusIcon, TrashIcon } from '@patternfly/react-icons'\nimport get from 'get-value'\nimport { Children, Fragment, ReactNode, useCallback, useContext, useState } from 'react'\nimport set from 'set-value'\nimport { FormWizardTextDetail } from '..'\nimport { FormWizardFieldGroup } from '../components/FormWizardFieldGroup'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardArrayInput(props: {\n    id: string\n    label?: string\n    path?: string | null\n    filter?: (item: any) => boolean\n    children: ReactNode\n    dropdownItems?: { label: string; action: () => object }[]\n    placeholder: string\n    collapsedText: ReactNode\n    collapsedDescription?: ReactNode\n    sortable?: boolean\n    newValue?: object\n}) {\n    const id = props.id\n    const path = props.path !== undefined ? props.path : id\n\n    const [collapsed, setCollapsed] = useState<Record<string, boolean>>({})\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n    let sourceArray = get(item, path as string) as object[]\n\n    if (!Array.isArray(sourceArray)) sourceArray = []\n\n    let values = sourceArray\n    if (props.filter) values = values.filter(props.filter)\n\n    const addItem = useCallback(\n        (newItem: object | object[]) => {\n            if (path === null) {\n                ;(item as any[]).push(newItem)\n            } else {\n                let newArray = values\n                if (Array.isArray(newItem)) {\n                    newArray = [...newArray, ...newItem]\n                } else {\n                    newArray.push(newItem as never)\n                }\n                set(item, path, newArray, { preservePaths: false })\n            }\n            formWizardContext.updateContext()\n        },\n        [values, item, path, formWizardContext]\n    )\n\n    if (formWizardContext.mode === InputMode.Details) {\n        return (\n            <DataList aria-label=\"\" isCompact>\n                {values.map((value, index) => (\n                    <FormWizardItemContext.Provider key={index} value={value}>\n                        <DataListItem aria-labelledby={`item-${index}`}>\n                            <DataListItemRow>\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key=\"primary content\">\n                                            <Stack id={`item-${index}`}>\n                                                {typeof props.collapsedText === 'string' ? (\n                                                    <FormWizardTextDetail id={props.collapsedText} path={props.collapsedText} />\n                                                ) : (\n                                                    props.collapsedText\n                                                )}\n                                                {props.collapsedDescription && (\n                                                    <DescriptionListDescription>{props.collapsedDescription}</DescriptionListDescription>\n                                                )}\n                                            </Stack>\n                                        </DataListCell>,\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    </FormWizardItemContext.Provider>\n                ))}\n            </DataList>\n        )\n    }\n    return (\n        <Fragment>\n            {props.label && (\n                <div className=\"pf-c-form__label pf-c-form__label-text\" style={{ marginBottom: -16 }}>\n                    {props.label}\n                </div>\n            )}\n            {values.length === 0 ? (\n                <Divider />\n            ) : (\n                values.map((value, index) => {\n                    const hasErrors = false\n                    return (\n                        <FormWizardItemContext.Provider key={index} value={value}>\n                            <FormWizardFieldGroup\n                                key={index}\n                                id={index.toString()}\n                                isExpanded={collapsed[index.toString()] !== true}\n                                setIsExpanded={(isExpanded) => {\n                                    setCollapsed((expanded) => ({ ...expanded, ...{ [index.toString()]: !isExpanded } }))\n                                }}\n                                toggleAriaLabel=\"Details\"\n                                header={\n                                    <FormFieldGroupHeader\n                                        titleText={{\n                                            text: hasErrors ? (\n                                                <Alert variant=\"danger\" title=\"Please fix validation errors.\" isInline isPlain />\n                                            ) : (\n                                                <Fragment>\n                                                    {typeof props.collapsedText === 'string' ? (\n                                                        <FormWizardTextDetail id={props.collapsedText} path={props.collapsedText} />\n                                                    ) : (\n                                                        props.collapsedText\n                                                    )}\n                                                </Fragment>\n                                            ),\n                                            id: `nested-field-group1-titleText-id-${index}`,\n                                        }}\n                                        titleDescription={!hasErrors && props.collapsedDescription ? props.collapsedDescription : undefined}\n                                        actions={\n                                            <Fragment>\n                                                {props.sortable && (\n                                                    <Fragment>\n                                                        <Button\n                                                            variant=\"plain\"\n                                                            aria-label=\"Move item up\"\n                                                            isDisabled={index === 0}\n                                                            onClick={() => {\n                                                                const temp = values[index]\n                                                                values[index] = values[index - 1]\n                                                                values[index - 1] = temp\n                                                                formWizardContext.updateContext()\n                                                            }}\n                                                        >\n                                                            <ArrowUpIcon />\n                                                        </Button>\n                                                        <Button\n                                                            variant=\"plain\"\n                                                            aria-label=\"Move item down\"\n                                                            isDisabled={index === values.length - 1}\n                                                            onClick={() => {\n                                                                const temp = values[index]\n                                                                values[index] = values[index + 1]\n                                                                values[index + 1] = temp\n                                                                formWizardContext.updateContext()\n                                                            }}\n                                                        >\n                                                            <ArrowDownIcon />\n                                                        </Button>\n                                                    </Fragment>\n                                                )}\n                                                <Button\n                                                    variant=\"plain\"\n                                                    aria-label=\"Remove item\"\n                                                    onClick={() => {\n                                                        sourceArray.splice(sourceArray.indexOf(value), 1)\n                                                        formWizardContext.updateContext()\n                                                    }}\n                                                >\n                                                    <TrashIcon />\n                                                </Button>\n                                            </Fragment>\n                                        }\n                                    />\n                                }\n                            >\n                                <Fragment>\n                                    {hasErrors && (\n                                        <FormAlert>\n                                            <Alert variant=\"danger\" title=\"Please fix validation errors.\" isInline isPlain />\n                                        </FormAlert>\n                                    )}\n                                    {props.children}\n                                    {/* <div className=\"pf-c-form__helper-text pf-m-error\">Error</div> */}\n                                </Fragment>\n                            </FormWizardFieldGroup>\n                        </FormWizardItemContext.Provider>\n                    )\n                })\n            )}\n            <div style={{ display: 'flex', alignItems: 'baseline', marginTop: -20, marginBottom: -8, gap: 8 }}>\n                {/* <div style={{ flexGrow: 1 }} /> */}\n                {!props.dropdownItems ? (\n                    <Button\n                        variant=\"link\"\n                        isSmall\n                        aria-label=\"Action\"\n                        onClick={() => {\n                            addItem(props.newValue ?? {})\n                        }}\n                    >\n                        <PlusIcon /> &nbsp; {props.placeholder}\n                    </Button>\n                ) : (\n                    <Dropdown2 placeholder={props.placeholder}>\n                        {props.dropdownItems.map((item, index) => {\n                            return (\n                                <DropdownItem key={index} onClick={() => addItem(item.action())}>\n                                    {item.label}\n                                </DropdownItem>\n                            )\n                        })}\n                    </Dropdown2>\n                )}\n            </div>\n        </Fragment>\n    )\n}\n\nfunction Dropdown2(props: { children?: ReactNode; placeholder: string }) {\n    const [open, setOpen] = useState(false)\n    const onToggle = useCallback(() => setOpen((open: boolean) => !open), [])\n    return (\n        <Dropdown\n            isPlain\n            dropdownItems={Children.toArray(props.children)}\n            toggle={\n                <DropdownToggle id=\"toggle-id\" onToggle={onToggle} toggleIndicator={CaretDownIcon}>\n                    {props.placeholder}\n                </DropdownToggle>\n            }\n            isOpen={open}\n        />\n    )\n}\n","import { Stack } from '@patternfly/react-core'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardIndented(props: { children?: ReactNode; hidden?: (item: any) => boolean }) {\n    const item = useContext(FormWizardItemContext)\n\n    if (!props.children) return <Fragment />\n\n    const hidden = props.hidden ? props.hidden(item) : false\n    if (hidden) return <Fragment />\n\n    return (\n        <Stack hasGutter style={{ paddingLeft: 48 }}>\n            {props.children}\n        </Stack>\n    )\n}\n","import { Checkbox, DescriptionListDescription, Split } from '@patternfly/react-core'\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form'\nimport { CheckIcon } from '@patternfly/react-icons'\nimport get from 'get-value'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport set from 'set-value'\nimport { FormWizardIndented } from '../components/FormWizardIndented'\nimport { FormWizardLabelHelp } from '../components/FormWizardLabelHelp'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardCheckbox(props: {\n    id: string\n    label: string\n    description?: string\n    path?: string\n    placeholder?: string\n    secret?: boolean\n    readonly?: boolean\n    disabled?: boolean\n    hidden?: boolean\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n    validation?: (value: string) => string | undefined\n    children?: ReactNode\n}) {\n    const id = props.id\n    const path = props.path ?? id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const value = get(item, path)\n\n    const showValidation = false\n    let error: string | undefined = undefined\n    let validated: 'error' | undefined = undefined\n    if (showValidation) {\n        if (props.validation) {\n            error = props.validation(value)\n        }\n        validated = error ? 'error' : undefined\n    }\n\n    if (props.hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        if (!value) return <Fragment />\n        return (\n            <Split hasGutter>\n                <CheckIcon />\n                <DescriptionListDescription>{props.label}</DescriptionListDescription>\n            </Split>\n        )\n    }\n\n    return (\n        <Fragment>\n            <FormGroup\n                id={`${props.id}-form-group`}\n                fieldId={id}\n                // label={props.label}\n                helperTextInvalid={error}\n                validated={validated}\n                helperText={props.helperText}\n            >\n                <Split>\n                    <Checkbox\n                        id={id ?? props.label}\n                        isChecked={value}\n                        onChange={(value) => {\n                            set(item, path, value)\n                            formWizardContext.updateContext()\n                        }}\n                        label={props.label}\n                        value={value}\n                    />\n                    <FormWizardLabelHelp id={id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />\n                </Split>\n            </FormGroup>\n            {value && <FormWizardIndented>{props.children}</FormWizardIndented>}\n        </Fragment>\n    )\n}\n","import { Fragment, ReactNode } from 'react'\nimport { useInputHidden } from './FormWizardInput'\n\nexport function FormWizardHidden(props: { children: ReactNode; hidden?: (item: any) => boolean }) {\n    const hidden = useInputHidden(props)\n    if (hidden) return <Fragment />\n    return <Fragment>{props.children}</Fragment>\n}\n","import { Button, Chip, ChipGroup, TextInput } from '@patternfly/react-core'\nimport { AngleDownIcon, AngleUpIcon, PlusIcon, TrashIcon } from '@patternfly/react-icons'\nimport get from 'get-value'\nimport { Fragment, useContext, useState } from 'react'\nimport set from 'set-value'\nimport { FormWizardContext } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardKeyValue(props: { id: string; label?: string; path?: string; placeholder: string }) {\n    const id = props.id\n    const path = props.path ?? id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const value = get(item, path) ?? {}\n\n    const [pairs] = useState<{ key: string; value: string }[]>(() => Object.keys(value).map((key) => ({ key, value: value[key] })))\n\n    const onKeyChange = (index: number, newKey: string) => {\n        pairs[index].key = newKey\n        set(\n            item,\n            path,\n            pairs.reduce((result, pair) => {\n                result[pair.key] = pair.value\n                return result\n            }, {} as Record<string, string>)\n        )\n        formWizardContext.updateContext()\n    }\n\n    const onValueChange = (index: number, newValue: string) => {\n        pairs[index].value = newValue\n        set(\n            item,\n            path,\n            pairs.reduce((result, pair) => {\n                result[pair.key] = pair.value\n                return result\n            }, {} as Record<string, string>)\n        )\n        formWizardContext.updateContext()\n    }\n\n    const onNewKey = () => {\n        pairs.push({ key: '', value: '' })\n        set(\n            item,\n            path,\n            pairs.reduce((result, pair) => {\n                result[pair.key] = pair.value\n                return result\n            }, {} as Record<string, string>)\n        )\n        formWizardContext.updateContext()\n    }\n\n    const onDeleteKey = (index: number) => {\n        pairs.splice(index, 1)\n        set(\n            item,\n            path,\n            pairs.reduce((result, pair) => {\n                result[pair.key] = pair.value\n                return result\n            }, {} as Record<string, string>)\n        )\n        formWizardContext.updateContext()\n    }\n\n    const [collapsed, setCollapsed] = useState(false)\n    return (\n        <div id={props.id} style={{ display: 'flex', flexDirection: 'column', rowGap: pairs.length ? 8 : 0 }}>\n            <div style={{ display: 'flex', alignItems: 'baseline' }}>\n                {props.label && (\n                    <div className=\"pf-c-form__label pf-c-form__label-text\" style={{ marginBottom: -16 }}>\n                        {props.label}\n                    </div>\n                )}\n                <Button variant=\"plain\" isSmall aria-label=\"Action\" onClick={() => setCollapsed(!collapsed)}>\n                    {collapsed ? <AngleUpIcon /> : <AngleDownIcon />}\n                </Button>\n                {collapsed && (\n                    <ChipGroup>\n                        {pairs.map((pair, index) => {\n                            return (\n                                <Fragment key={index}>\n                                    {pair.key && (\n                                        <Chip isReadOnly>\n                                            {pair.key}\n                                            {pair.value && <Fragment> = {pair.value}</Fragment>}\n                                        </Chip>\n                                    )}\n                                </Fragment>\n                            )\n                        })}\n                    </ChipGroup>\n                )}\n            </div>\n            {!collapsed && (\n                <div\n                    style={{\n                        display: 'grid',\n                        gridTemplateColumns: 'fit-content(200px) fit-content(0) auto fit-content(0)',\n                        alignItems: 'center',\n                        columnGap: 8,\n                        rowGap: 8,\n                    }}\n                >\n                    {pairs.map((pair, index) => {\n                        return (\n                            <Fragment key={index}>\n                                <TextInput id=\"key\" value={pair.key} onChange={(e) => onKeyChange(index, e)} />\n                                <span>=</span>\n                                <TextInput id=\"value\" value={pair.value} onChange={(e) => onValueChange(index, e)} />\n                                <Button variant=\"plain\" aria-label=\"Remove item\" onClick={() => onDeleteKey(index)}>\n                                    <TrashIcon />\n                                </Button>\n                            </Fragment>\n                        )\n                    })}\n                </div>\n            )}\n            {!collapsed && (\n                <div style={{ display: 'flex', alignItems: 'baseline', gap: 8 }}>\n                    <Button variant=\"link\" isSmall aria-label=\"Action\" onClick={onNewKey}>\n                        <PlusIcon /> &nbsp; {props.placeholder}\n                    </Button>\n                </div>\n            )}\n        </div>\n    )\n}\n","import {\n    Chip,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    LabelGroup,\n    Select,\n    SelectOption,\n    SelectVariant,\n} from '@patternfly/react-core'\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form'\nimport get from 'get-value'\nimport { Fragment, useContext, useState } from 'react'\nimport set from 'set-value'\nimport { FormWizardLabelHelp } from '../components/FormWizardLabelHelp'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardLabels(props: {\n    id: string\n    label: string\n    path?: string\n    placeholder?: string\n    secret?: boolean\n    readonly?: boolean\n    disabled?: boolean\n    required?: boolean\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n    validation?: (value: string) => string | undefined\n    options?: {\n        id: string\n        label: string\n        value: string\n    }[]\n    hidden?: (item: any) => boolean\n}) {\n    const id = props.id\n    const path = props.path ?? id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const [open, setOpen] = useState(false)\n\n    const value = get(item, path)\n    let selections: string[] = []\n    if (value)\n        selections = Object.keys(value).map((key) => {\n            const v = value[key]\n            if (v) key += '=' + (v as string).toString()\n            return key\n        })\n\n    const showValidation = false\n    let error: string | undefined = undefined\n    let validated: 'error' | undefined = undefined\n    if (showValidation) {\n        if (props.validation) {\n            error = props.validation(value)\n        }\n        validated = error ? 'error' : undefined\n    }\n\n    const hidden = props.hidden ? props.hidden(item) : false\n    if (hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        return (\n            <DescriptionListGroup>\n                <DescriptionListTerm>{props.label}</DescriptionListTerm>\n                <DescriptionListDescription>\n                    <LabelGroup>\n                        {selections.map((label) => (\n                            <Chip key={label} isReadOnly>\n                                {label}\n                            </Chip>\n                        ))}\n                    </LabelGroup>\n                </DescriptionListDescription>\n            </DescriptionListGroup>\n        )\n    }\n\n    return (\n        <FormGroup\n            id={`${id}-form-group`}\n            fieldId={id}\n            label={props.label}\n            isRequired={props.required}\n            helperTextInvalid={error}\n            validated={validated}\n            helperText={props.helperText}\n            labelIcon={<FormWizardLabelHelp id={id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />}\n        >\n            <Select\n                variant={SelectVariant.typeaheadMulti}\n                // typeAheadAriaLabel=\"Select a state\"\n                isOpen={open}\n                onToggle={setOpen}\n                onSelect={(event) => {\n                    event.preventDefault()\n                }}\n                onClear={\n                    props.required\n                        ? undefined\n                        : () => {\n                              set(item, path, '', { preservePaths: false })\n                              formWizardContext.updateContext()\n                          }\n                }\n                selections={selections}\n                // aria-labelledby={titleId}\n                placeholderText={selections.length > 0 ? undefined : props.placeholder}\n                isCreatable\n                // isCreatable={isCreatable}\n                onCreateOption={(label) => {\n                    const parts = label.split('=')\n                    const key = parts[0]\n                    let value = ''\n                    if (parts.length > 1) {\n                        value = parts.slice(1).join('=')\n                    }\n                    set(item, path + '.' + key, value)\n                    formWizardContext.updateContext()\n                }}\n            >\n                {props.options?.map((option) => {\n                    return (\n                        <SelectOption\n                            // isDisabled={option.disabled}\n                            key={option.id}\n                            value={option.value}\n                            // {...(option.description && { description: option.description })}\n                        >\n                            {option.label}\n                        </SelectOption>\n                    )\n                })}\n            </Select>\n        </FormGroup>\n    )\n}\n","import { Radio as PfRadio, Stack } from '@patternfly/react-core'\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form'\nimport get from 'get-value'\nimport { Children, createContext, Fragment, isValidElement, ReactElement, ReactNode, useContext } from 'react'\nimport set from 'set-value'\nimport { FormWizardIndented } from '../components/FormWizardIndented'\nimport { FormWizardLabelHelp } from '../components/FormWizardLabelHelp'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport interface IRadioGroupContextState {\n    value?: any\n    setValue?: (value: any) => void\n    readonly?: boolean\n    disabled?: boolean\n}\n\nexport const RadioGroupContext = createContext<IRadioGroupContextState>({})\n\nexport function FormWizardRadioGroup(props: {\n    id: string\n    label?: string\n    path: string\n    readonly?: boolean\n    disabled?: boolean\n    required?: boolean\n    hidden?: boolean\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n    children?: ReactNode\n}) {\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const state: IRadioGroupContextState = {\n        value: get(item, props.path),\n        setValue: (value) => {\n            set(item, props.path, value)\n            formWizardContext.updateContext()\n        },\n        readonly: props.readonly,\n        disabled: props.disabled,\n    }\n\n    if (props.hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        if (!state.value) return <Fragment />\n\n        let selectedChild: ReactElement | undefined\n        Children.forEach(props.children, (child) => {\n            if (isValidElement(child)) {\n                const value = child.props.value\n                if (value === state.value) {\n                    selectedChild = child\n                }\n            }\n        })\n\n        if (!selectedChild) return <Fragment />\n        return <Fragment>{selectedChild}</Fragment>\n    }\n\n    return (\n        <RadioGroupContext.Provider value={state}>\n            <FormGroup\n                id={`${props.id}-form-group`}\n                fieldId={props.id}\n                label={props.label}\n                labelIcon={<FormWizardLabelHelp id={props.id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />}\n                helperText={props.helperText}\n                isRequired={props.required}\n                // tODO validation.... required...\n            >\n                <Stack hasGutter>{props.children}</Stack>\n            </FormGroup>\n        </RadioGroupContext.Provider>\n    )\n}\n\nexport function FormWizardRadio(props: {\n    id: string\n    label: string\n    value: string | number | boolean\n    description?: string\n    children?: ReactNode\n}) {\n    const radioGroupContext = useContext(RadioGroupContext)\n    return (\n        <Fragment>\n            <PfRadio\n                id={props.id}\n                name={props.label}\n                label={props.label}\n                description={props.description}\n                isChecked={radioGroupContext.value === props.value}\n                onChange={() => radioGroupContext.setValue?.(props.value)}\n                isDisabled={radioGroupContext.disabled}\n                readOnly={radioGroupContext.readonly}\n            />\n            {radioGroupContext.value === props.value && <FormWizardIndented>{props.children}</FormWizardIndented>}\n        </Fragment>\n    )\n}\n","import { FormGroup } from '@patternfly/react-core/dist/js/components/Form'\nimport { ReactNode } from 'react'\nimport { FormWizardLabelHelp } from '../components/FormWizardLabelHelp'\nimport { InputCommonProps, useInputValidation } from './FormWizardInput'\n\nexport type FormWizardInputLabelProps = InputCommonProps & { children: ReactNode }\n\nexport function FormWizardInputLabel(props: FormWizardInputLabelProps) {\n    const { validated, error } = useInputValidation(props)\n    return (\n        <FormGroup\n            id={`${props.id}-form-group`}\n            key={`${props.id}-form-group`}\n            fieldId={props.id}\n            label={props.label}\n            isRequired={props.required}\n            helperTextInvalid={error}\n            validated={validated}\n            helperText={props.helperText}\n            labelIcon={<FormWizardLabelHelp id={props.id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />}\n        >\n            {props.children}\n        </FormGroup>\n    )\n}\n","import { Chip, ChipGroup, Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core'\nimport get from 'get-value'\nimport { Fragment, ReactNode, useCallback, useContext, useMemo, useState } from 'react'\nimport set from 'set-value'\nimport { FormWizardTextDetail } from '..'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\nimport { InputCommonProps, lowercaseFirst } from './FormWizardInput'\nimport { FormWizardInputLabel } from './FormWizardInputLabel'\nimport './FormWizardSelect.css'\n\nexport interface FormWizardOption<T> {\n    id?: string\n    icon?: ReactNode\n    label: string\n    description?: string\n    value: T\n    disabled?: boolean\n}\n\nexport interface FormWizardOptionGroup<T> {\n    id?: string\n    label: string\n    options: (FormWizardOption<T> | string | number)[]\n}\n\ntype FormWizardSelectCommonProps<T> = InputCommonProps<T> & {\n    placeholder?: string\n    footer?: ReactNode\n\n    /** key path is the path to get the key of the value\n     * Used in cases where the value is an object, but we need to track select by a string or number\n     */\n    keyPath?: string\n}\n\nexport enum FormWizardSelectVariant {\n    Single = 'single',\n    Multi = 'multi',\n    SingleGrouped = 'single-grouped',\n    MultiGrouped = 'multi-grouped',\n}\n\ninterface FormWizardSingleSelectProps<T> extends FormWizardSelectCommonProps<T> {\n    variant: 'single'\n    options: (FormWizardOption<T> | string | number)[]\n}\n\ninterface FormWizardMultiselectProps<T> extends FormWizardSelectCommonProps<T[]> {\n    variant: 'multi'\n    options: (FormWizardOption<T> | string | number)[]\n}\n\ninterface FormWizardGroupedSingleSelectProps<T> extends FormWizardSelectCommonProps<T> {\n    variant: 'single-grouped'\n    groups: FormWizardOptionGroup<T>[]\n}\n\ninterface FormWizardGroupedMultiselectProps<T> extends FormWizardSelectCommonProps<T[]> {\n    variant: 'multi-grouped'\n    groups: FormWizardOptionGroup<T>[]\n}\n\nexport function FormWizardSelect<T>(props: Omit<FormWizardSingleSelectProps<T>, 'variant'>) {\n    return <FormWizardSelectBase<T> {...props} variant=\"single\" />\n}\n\nexport function FormWizardMultiselect<T>(props: Omit<FormWizardMultiselectProps<T>, 'variant'>) {\n    return <FormWizardSelectBase<T> {...props} variant=\"multi\" />\n}\n\nexport function FormWizardGroupedSelect<T>(props: Omit<FormWizardGroupedSingleSelectProps<T>, 'variant'>) {\n    return <FormWizardSelectBase<T> {...props} variant=\"single-grouped\" />\n}\n\nexport function FormWizardGroupedMultiselect<T>(props: Omit<FormWizardGroupedMultiselectProps<T>, 'variant'>) {\n    return <FormWizardSelectBase<T> {...props} variant=\"multi-grouped\" />\n}\n\nexport type FormWizardSelectProps<T> =\n    | FormWizardSingleSelectProps<T>\n    | FormWizardMultiselectProps<T>\n    | FormWizardGroupedSingleSelectProps<T>\n    | FormWizardGroupedMultiselectProps<T>\n\nfunction FormWizardSelectBase<T = any>(props: FormWizardSelectProps<T>) {\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n    const placeholder = props.placeholder ?? `Select the ${lowercaseFirst(props.label)}`\n\n    const id = props.id\n    const path = props.path ?? id\n    const keyPath = props.keyPath\n\n    const [open, setOpen] = useState(false)\n\n    // The drop down items with icons and descriptions - optionally grouped\n    const selectOptions: ({\n        id: string\n        icon?: ReactNode\n        label: string\n        description?: string\n        value: string | number | T\n        keyedValue: string | number\n        disabled?: boolean\n    } & SelectOptionObject)[] = useMemo(() => {\n        switch (props.variant) {\n            case 'single':\n            case 'multi':\n                return props.options.map((option) => {\n                    let id: string\n                    let label: string\n                    let value: string | number | T\n                    let keyedValue: string | number\n                    let toString: () => string\n                    if (typeof option === 'string' || typeof option === 'number') {\n                        id = option.toString()\n                        label = option.toString()\n                        value = option\n                        keyedValue = option\n                        toString = () => option.toString()\n                    } else {\n                        id = option.id ?? option.label\n                        label = option.label\n                        if (!keyPath) throw new Error()\n                        value = option.value\n                        keyedValue = get(value as any, keyPath)\n                        if (typeof keyedValue !== 'string' && typeof keyedValue !== 'number') {\n                            throw new Error()\n                        }\n                        toString = () => {\n                            return (\n                                <div key={option.id} style={{ display: 'flex', alignItems: 'baseline', gap: 8 }}>\n                                    {option?.icon}\n                                    {option.label}\n                                </div>\n                            ) as unknown as string\n                        }\n                    }\n                    const compareTo = (compareTo: any) => compareTo === keyedValue\n                    return { id, label, value, keyedValue, toString, compareTo }\n                })\n            case 'single-grouped':\n            case 'multi-grouped': {\n                // TODO\n                return []\n            }\n        }\n    }, [props, keyPath])\n\n    const value = useMemo(() => get(item, path), [item, path])\n\n    const keyedValue = useMemo(() => {\n        if (typeof value === 'undefined') return ''\n        if (typeof value === 'string') return value\n        if (typeof value === 'number') return value\n        if (Array.isArray(value)) {\n            return value.map((value) => {\n                if (typeof value === 'string') return value\n                if (typeof value === 'number') return value\n                if (!keyPath) throw new Error()\n                const valueKey = get(value, keyPath)\n                if (typeof valueKey === 'string') return valueKey\n                if (typeof valueKey === 'number') return valueKey\n                throw new Error()\n            })\n        }\n        if (!keyPath) throw new Error()\n        const valueKey = get(value, keyPath)\n        if (typeof valueKey === 'string') return valueKey\n        if (typeof valueKey === 'number') return valueKey\n        throw new Error()\n    }, [value, keyPath])\n\n    const selections = useMemo(() => {\n        if (Array.isArray(keyedValue)) {\n            return selectOptions.filter(\n                (selectOption) => keyedValue.find((keyedValue) => keyedValue === selectOption.keyedValue) !== undefined\n            )\n        } else {\n            return selectOptions.find((selectOption) => keyedValue === selectOption.keyedValue)\n        }\n    }, [keyedValue, selectOptions])\n\n    let error: string | undefined = undefined\n    let validated: 'error' | undefined = undefined\n    if (formWizardContext.showValidation) {\n        if (props.required && !selections) {\n            error = `${props.label} is required`\n        } else if (props.validation) {\n            error = props.validation(value)\n        }\n        validated = error ? 'error' : undefined\n    }\n\n    const onSelect = useCallback(\n        (_, selectOptionObject) => {\n            switch (props.variant) {\n                case 'single':\n                case 'single-grouped':\n                    set(item, path, selectOptionObject.value)\n                    setOpen(false)\n                    break\n                case 'multi':\n                case 'multi-grouped': {\n                    let newValues: any[] = []\n                    if (Array.isArray(value)) newValues = [...value]\n                    if (newValues.includes(selectOptionObject.value)) {\n                        newValues = newValues.filter((value) => value !== selectOptionObject.value)\n                    } else {\n                        newValues.push(selectOptionObject.value)\n                    }\n                    set(item, path, newValues)\n                    break\n                }\n            }\n            formWizardContext.updateContext()\n        },\n        [item, props, formWizardContext, path, value]\n    )\n\n    const isGrouped = useMemo(() => {\n        switch (props.variant) {\n            case 'single-grouped':\n            case 'multi-grouped':\n                return true\n            case 'single':\n            case 'multi':\n                return false\n        }\n    }, [props.variant])\n\n    const onClear = useCallback(() => {\n        // set(item, props.path, '', { preservePaths: false })\n        formWizardContext.updateContext()\n    }, [formWizardContext])\n\n    const onFilter = useCallback(\n        (_, value: string) =>\n            selectOptions\n                .filter((option) => option.label.toLowerCase().includes(value.toLowerCase()))\n                .map((option) => (\n                    <SelectOption\n                        key={option.id}\n                        id={option.id}\n                        value={option}\n                        description={option.description}\n                        isDisabled={option.disabled}\n                    >\n                        {option.toString()}\n                    </SelectOption>\n                )),\n        [selectOptions]\n    )\n\n    const variant = useMemo(() => {\n        switch (props.variant) {\n            case 'multi':\n            case 'multi-grouped':\n                return SelectVariant.checkbox\n            case 'single':\n            case 'single-grouped':\n                return SelectVariant.single\n        }\n    }, [props.variant])\n\n    const hidden = props.hidden ? props.hidden(item) : false\n    if (hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        return <FormWizardTextDetail id={props.id} label={props.label} />\n    }\n\n    return (\n        <FormWizardInputLabel {...props}>\n            <Select\n                id={`select-${id}`}\n                variant={variant}\n                isOpen={open}\n                onToggle={setOpen}\n                selections={selections}\n                onSelect={onSelect}\n                onClear={props.required ? undefined : onClear}\n                // isCreatable\n                // onCreateOption\n                validated={validated}\n                isGrouped={isGrouped}\n                hasInlineFilter\n                onFilter={onFilter}\n                footer={props.footer}\n                placeholderText={\n                    Array.isArray(selections) ? (\n                        selections.length === 0 ? (\n                            placeholder\n                        ) : (\n                            <ChipGroup style={{ marginTop: -8, marginBottom: -8 }} numChips={9999}>\n                                {selections.map((selection) => (\n                                    <Chip isReadOnly key={selection.id}>\n                                        {selection.label}\n                                    </Chip>\n                                ))}\n                            </ChipGroup>\n                        )\n                    ) : (\n                        placeholder\n                    )\n                }\n            >\n                {selectOptions.map((option) => (\n                    <SelectOption\n                        key={option.id}\n                        id={option.id}\n                        value={option}\n                        description={option.description}\n                        isDisabled={option.disabled}\n                    >\n                        {option.toString()}\n                    </SelectOption>\n                ))}\n            </Select>\n        </FormWizardInputLabel>\n    )\n}\n","import get from 'get-value'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardSelector(props: { selectKey: string; selectValue: string; defaultValue?: object; children?: ReactNode }) {\n    const item = useContext(FormWizardItemContext)\n    if (!Array.isArray(item)) return <Fragment>Input must be an array!</Fragment>\n\n    const newItem = item.find((i) => get(i, props.selectKey) === props.selectValue)\n    if (!Array.isArray(item)) return <Fragment>Item not found!</Fragment>\n\n    return <FormWizardItemContext.Provider value={newItem}>{props.children}</FormWizardItemContext.Provider>\n}\n","import { Button, Chip, ChipGroup, Split, TextInput } from '@patternfly/react-core'\nimport { AngleDownIcon, AngleUpIcon, PlusIcon, TrashIcon } from '@patternfly/react-icons'\nimport get from 'get-value'\nimport { Fragment, useContext, useState } from 'react'\nimport set from 'set-value'\nimport { FormWizardContext } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardStringArray(props: {\n    id: string\n    label?: string\n    path?: string\n    placeholder: string\n    map?: (value: any) => string[]\n    unmap?: (values: string[]) => any\n}) {\n    const id = props.id\n    const path = props.path ?? id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    let values: string[] = get(item, path)\n    if (props.map) values = props.map(values)\n    else if (!values) values = []\n\n    const onKeyChange = (index: number, newKey: string) => {\n        values[index] = newKey\n        let newValue = values\n        if (props.unmap) newValue = props.unmap(values)\n        set(item, path, newValue, { preservePaths: false })\n        formWizardContext.updateContext()\n    }\n\n    const onNewKey = () => {\n        values.push('')\n        let newValue = values\n        if (props.unmap) newValue = props.unmap(values)\n        set(item, path, newValue, { preservePaths: false })\n        formWizardContext.updateContext()\n    }\n\n    const onDeleteKey = (index: number) => {\n        values.splice(index, 1)\n        let newValue = values\n        if (props.unmap) newValue = props.unmap(values)\n        set(item, path, newValue, { preservePaths: false })\n        formWizardContext.updateContext()\n    }\n\n    const [collapsed, setCollapsed] = useState(false)\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', rowGap: values.length ? 8 : 0 }}>\n            <div style={{ display: 'flex', alignItems: 'baseline' }}>\n                {props.label && (\n                    <div className=\"pf-c-form__label pf-c-form__label-text\" style={{ marginBottom: -16 }}>\n                        {props.label}\n                    </div>\n                )}\n                <Button variant=\"plain\" isSmall aria-label=\"Action\" onClick={() => setCollapsed(!collapsed)}>\n                    {collapsed ? <AngleUpIcon /> : <AngleDownIcon />}\n                </Button>\n                {collapsed && (\n                    <ChipGroup>\n                        {values.map((pair, index) => {\n                            return <Fragment key={index}>{pair && <Chip isReadOnly>{pair}</Chip>}</Fragment>\n                        })}\n                    </ChipGroup>\n                )}\n            </div>\n            {!collapsed && (\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        rowGap: 8,\n                    }}\n                >\n                    {values.map((pair, index) => {\n                        return (\n                            <Split key={index}>\n                                <TextInput value={pair} onChange={(e) => onKeyChange(index, e)} />\n                                <Button variant=\"plain\" aria-label=\"Remove item\" onClick={() => onDeleteKey(index)}>\n                                    <TrashIcon />\n                                </Button>\n                            </Split>\n                        )\n                    })}\n                </div>\n            )}\n            {!collapsed && (\n                <div style={{ display: 'flex', alignItems: 'baseline', gap: 8 }}>\n                    <Button variant=\"link\" isSmall aria-label=\"Action\" onClick={onNewKey}>\n                        <PlusIcon /> &nbsp; {props.placeholder}\n                    </Button>\n                </div>\n            )}\n        </div>\n    )\n}\n","import { DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, Stack } from '@patternfly/react-core'\nimport { Fragment, ReactNode } from 'react'\nimport { FormWizardIndented } from '../components/FormWizardIndented'\nimport { useInputHidden, useInputValue } from './FormWizardInput'\n\nexport function FormWizardTextDetail(props: {\n    id: string\n    label?: string\n    path?: string\n    placeholder?: string\n    secret?: boolean\n    hidden?: (item: any) => boolean\n    children?: ReactNode\n}) {\n    // TODO - Support hiding sercets\n    // const [showSecrets, setShowSecrets] = useState(false)\n\n    const value = useInputValue(props, '')\n    const hidden = useInputHidden(props)\n    if (hidden) return <Fragment />\n\n    if (!props.label) {\n        if (!value && props.placeholder) {\n            return <span style={{ opacity: 0.7 }}>{props.placeholder}</span>\n        }\n\n        if (value === undefined) {\n            return <Fragment />\n        }\n\n        return <Fragment>{value}</Fragment>\n    }\n\n    if (value === undefined) {\n        return <Fragment />\n    }\n\n    return (\n        <Stack>\n            <DescriptionListGroup id={props.id}>\n                <DescriptionListTerm>{props.label}</DescriptionListTerm>\n                <DescriptionListDescription>{value}</DescriptionListDescription>\n            </DescriptionListGroup>\n            {props.children && <FormWizardIndented>{props.children}</FormWizardIndented>}\n        </Stack>\n    )\n}\n","import { Button } from '@patternfly/react-core/dist/js/components/Button'\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon'\n\nexport function ClearInputButton(props: { onClick: () => void }) {\n    const { onClick } = props\n    return (\n        <Button variant=\"control\" onClick={onClick} tabIndex={-1}>\n            <TimesCircleIcon />\n        </Button>\n    )\n}\n","import { Button } from '@patternfly/react-core/dist/js/components/Button'\nimport PasteIcon from '@patternfly/react-icons/dist/js/icons/paste-icon'\n\nexport function PasteInputButton(props: { setValue: (value: string) => void; setShowSecrets?: (value: boolean) => void }) {\n    const { setValue, setShowSecrets } = props\n    return (\n        <Button\n            variant=\"control\"\n            onClick={() => {\n                void navigator.clipboard.readText().then((value) => {\n                    setValue(value)\n                    if (value && setShowSecrets) setShowSecrets(false)\n                })\n            }}\n            tabIndex={-1}\n        >\n            <PasteIcon />\n        </Button>\n    )\n}\n","import { Button } from '@patternfly/react-core/dist/js/components/Button'\nimport EyeIcon from '@patternfly/react-icons/dist/js/icons/eye-icon'\nimport EyeSlashIcon from '@patternfly/react-icons/dist/js/icons/eye-slash-icon'\n\nexport function ShowSecretsButton(props: { showSecrets: boolean; setShowSecrets: (value: boolean) => void }) {\n    const { showSecrets, setShowSecrets } = props\n    return (\n        <Button variant=\"control\" onClick={() => setShowSecrets(!showSecrets)}>\n            {showSecrets ? <EyeIcon /> : <EyeSlashIcon />}\n        </Button>\n    )\n}\n","import { InputGroup } from '@patternfly/react-core/dist/js/components/InputGroup'\nimport { TextInput } from '@patternfly/react-core/dist/js/components/TextInput'\nimport { Fragment, useContext, useState } from 'react'\nimport { FormWizardTextDetail } from '..'\nimport { ClearInputButton } from '../components/ClearInputButton'\nimport { PasteInputButton } from '../components/PasteInputButton'\nimport { ShowSecretsButton } from '../components/ShowSecretsButton'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { InputCommonProps, lowercaseFirst, useInputHidden, useInputValidation, useInputValue } from './FormWizardInput'\nimport { FormWizardInputLabel } from './FormWizardInputLabel'\n\nexport type FormWizardTextInputProps = InputCommonProps<string> & {\n    placeholder?: string\n    secret?: boolean\n}\n\nexport function FormWizardTextInput(props: FormWizardTextInputProps) {\n    const formWizardContext = useContext(FormWizardContext)\n\n    const [value, setValue] = useInputValue(props, '')\n    const { validated } = useInputValidation(props)\n\n    const placeholder = props.placeholder ?? `Enter the ${lowercaseFirst(props.label)}`\n    const [showSecrets, setShowSecrets] = useState(false)\n\n    const hidden = useInputHidden(props)\n    if (hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        return <FormWizardTextDetail id={props.id} label={props.label} />\n    }\n\n    return (\n        <FormWizardInputLabel {...props}>\n            <InputGroup id={`${props.id}-input-group`} key={`${props.id}-input-group`}>\n                <TextInput\n                    id={props.id}\n                    placeholder={placeholder}\n                    validated={validated}\n                    value={value}\n                    onChange={setValue}\n                    isReadOnly={props.readonly}\n                    type={!props.secret || showSecrets ? 'text' : 'password'}\n                />\n                {value === '' && <PasteInputButton setValue={setValue} setShowSecrets={setShowSecrets} />}\n                {value !== '' && !props.readonly && !props.disabled && <ClearInputButton onClick={() => setValue('')} />}\n                {value !== '' && props.secret && <ShowSecretsButton showSecrets={showSecrets} setShowSecrets={setShowSecrets} />}\n            </InputGroup>\n        </FormWizardInputLabel>\n    )\n}\n","import { FormGroup, Gallery, Tile } from '@patternfly/react-core'\nimport get from 'get-value'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport set from 'set-value'\nimport { FormWizardTextDetail, IRadioGroupContextState, RadioGroupContext } from '..'\nimport { FormWizardLabelHelp } from '../components/FormWizardLabelHelp'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardTiles(props: {\n    id: string\n    label?: string\n    path?: string\n    readonly?: boolean\n    disabled?: boolean\n    required?: boolean\n    hidden?: boolean\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n    children?: ReactNode\n}) {\n    const path = props.path ?? props.id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const state: IRadioGroupContextState = {\n        value: get(item, path),\n        setValue: (value) => {\n            set(item, path, value, { preservePaths: false })\n            formWizardContext.updateContext()\n        },\n        readonly: props.readonly,\n        disabled: props.disabled,\n    }\n\n    if (props.hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        return <FormWizardTextDetail id={props.id} label={props.label} />\n    }\n\n    return (\n        <RadioGroupContext.Provider value={state}>\n            <FormGroup\n                id={`${props.id}-form-group`}\n                fieldId={props.id}\n                label={props.label}\n                labelIcon={<FormWizardLabelHelp id={props.id} labelHelp={props.labelHelp} labelHelpTitle={props.labelHelpTitle} />}\n                helperText={props.helperText}\n                isRequired={props.required}\n                // tODO validation.... required...\n            >\n                <Gallery hasGutter>{props.children}</Gallery>\n            </FormGroup>\n        </RadioGroupContext.Provider>\n    )\n}\n\nexport function FormWizardTile(props: {\n    id: string\n    label: string\n    value: string | number | boolean\n    description?: string\n    icon?: ReactNode\n    children?: ReactNode\n}) {\n    const context = useContext(RadioGroupContext)\n    return (\n        <Tile\n            id={props.id}\n            name={props.label}\n            title={props.label}\n            isDisabled={context.disabled}\n            readOnly={context.readonly}\n            isSelected={context.value === props.value}\n            onClick={() => context.setValue?.(props.value)}\n            icon={props.icon}\n            isDisplayLarge\n            isStacked\n        >\n            {props.description}\n        </Tile>\n    )\n}\n","import { DescriptionListDescription, Split, TimePicker } from '@patternfly/react-core'\nimport { FormGroup } from '@patternfly/react-core/dist/js/components/Form'\nimport { CheckIcon } from '@patternfly/react-icons'\nimport get from 'get-value'\nimport { Fragment, ReactNode, useContext } from 'react'\nimport set from 'set-value'\nimport { FormWizardContext, InputMode } from '../contexts/FormWizardContext'\nimport { FormWizardItemContext } from '../contexts/FormWizardItemContext'\n\nexport function FormWizardTimeRange(props: {\n    id: string\n    label: string\n    description?: string\n    path?: string\n    placeholder?: string\n    secret?: boolean\n    readonly?: boolean\n    disabled?: boolean\n    hidden?: boolean\n    labelHelp?: string\n    labelHelpTitle?: string\n    helperText?: string\n    validation?: (value: string) => string | undefined\n    children?: ReactNode\n}) {\n    const id = props.id\n    const path = props.path ?? id\n\n    const formWizardContext = useContext(FormWizardContext)\n    const item = useContext(FormWizardItemContext)\n\n    const value = get(item, path)\n\n    const showValidation = false\n    let error: string | undefined = undefined\n    let validated: 'error' | undefined = undefined\n    if (showValidation) {\n        if (props.validation) {\n            error = props.validation(value)\n        }\n        validated = error ? 'error' : undefined\n    }\n\n    if (props.hidden) return <Fragment />\n\n    if (formWizardContext.mode === InputMode.Details) {\n        if (!value) return <Fragment />\n        return (\n            <Split hasGutter>\n                <CheckIcon />\n                <DescriptionListDescription>{props.label}</DescriptionListDescription>\n            </Split>\n        )\n    }\n\n    return (\n        <Fragment>\n            <FormGroup\n                id={`${props.id}-form-group`}\n                fieldId={id}\n                isInline\n                label={props.label}\n                helperText={props.helperText}\n                helperTextInvalid={error}\n                validated={validated}\n                isRequired\n            >\n                <TimePicker\n                    id={`${props.id}-time-picker`}\n                    key={id}\n                    onChange={(value) => {\n                        set(item, path, value)\n                        formWizardContext.updateContext()\n                    }}\n                    label={props.label}\n                    value={value}\n                />\n            </FormGroup>\n        </Fragment>\n    )\n}\n","import { Fragment } from 'react'\nimport {\n    FormSubmit,\n    FormWizardArrayInput,\n    FormWizardKeyValue,\n    FormWizardPage,\n    FormWizardSection,\n    FormWizardSelect,\n    FormWizardStep,\n    FormWizardTextDetail,\n    FormWizardTextInput,\n} from '../../src'\n\nexport function AnsibleWizard(props: { onSubmit?: FormSubmit; credentials: string[] }) {\n    return (\n        <FormWizardPage\n            title=\"Create Ansible automation template\"\n            breadcrumb={[{ label: 'Home', to: '.' }, { label: 'Automation' }]}\n            onSubmit={props.onSubmit}\n            defaultData={{\n                apiVersion: 'cluster.open-cluster-management.io/v1beta1',\n                kind: 'ClusterCurator',\n            }}\n        >\n            <FormWizardStep label=\"Details\">\n                <FormWizardSection label=\"Details\" prompt=\"Configure the automation template\">\n                    <FormWizardTextInput id=\"metadata.name\" label=\"Name\" required />\n                    <FormWizardSelect\n                        id=\"metadata.namespace\"\n                        label=\"Namespace\"\n                        placeholder=\"Select the namespace\"\n                        helperText=\"The namespace on the hub cluster where the resources will be created.\"\n                        options={['default']}\n                        required\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Install\">\n                <FormWizardSelect\n                    id=\"spec.install.towerAuthSecret\"\n                    label=\"Ansible credentials for install\"\n                    helperText=\"Ansible credentials for the running Ansible jobs during cluster install.\"\n                    options={props.credentials}\n                    required\n                />\n\n                <FormWizardSection\n                    id=\"pre-install\"\n                    label=\"Pre-install jobs\"\n                    prompt=\"Pre-install Ansible job templates\"\n                    description=\"Ansible job templates run before cluster installation.\"\n                >\n                    <FormWizardArrayInput\n                        id=\"spec.install.prehook\"\n                        placeholder=\"Add job template\"\n                        collapsedText={<FormWizardTextDetail id=\"name\" placeholder=\"Expand to enter the Ansible job template\" />}\n                        sortable\n                    >\n                        <AnsibleWizardJobTemplate />\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n                <FormWizardSection\n                    id=\"post-install\"\n                    label=\"Post-install jobs\"\n                    prompt=\"Post-install Ansible job templates\"\n                    description=\"Ansible job templates run after cluster installation.\"\n                >\n                    <FormWizardArrayInput\n                        id=\"spec.install.posthook\"\n                        placeholder=\"Add job template\"\n                        collapsedText={<FormWizardTextDetail id=\"name\" placeholder=\"Expand to enter the Ansible job template\" />}\n                        sortable\n                    >\n                        <AnsibleWizardJobTemplate />\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Upgrade\">\n                <FormWizardSelect\n                    id=\"spec.upgrade.towerAuthSecret\"\n                    label=\"Ansible credentials for upgrade\"\n                    helperText=\"Ansible credentials for the running Ansible jobs during cluster upgrade.\"\n                    options={props.credentials}\n                    required\n                />\n                <FormWizardSection\n                    id=\"pre-upgrade\"\n                    label=\"Pre-upgrade jobs\"\n                    prompt=\"Pre-upgrade Ansible job templates\"\n                    description=\"Ansible job templates run before cluster upgrade.\"\n                >\n                    <FormWizardArrayInput\n                        id=\"spec.upgrade.prehook\"\n                        placeholder=\"Add job template\"\n                        collapsedText={<FormWizardTextDetail id=\"name\" placeholder=\"Expand to enter the Ansible job template\" />}\n                        sortable\n                    >\n                        <AnsibleWizardJobTemplate />\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n                <FormWizardSection\n                    id=\"post-upgrade\"\n                    label=\"Post-upgrade jobs\"\n                    prompt=\"Post-upgrade Ansible job templates\"\n                    description=\"Ansible job templates run after cluster upgrade.\"\n                >\n                    <FormWizardArrayInput\n                        id=\"spec.upgrade.posthook\"\n                        placeholder=\"Add job template\"\n                        collapsedText={<FormWizardTextDetail id=\"name\" placeholder=\"Expand to enter the Ansible job template\" />}\n                        sortable\n                    >\n                        <AnsibleWizardJobTemplate />\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n            </FormWizardStep>\n        </FormWizardPage>\n    )\n}\n\nfunction AnsibleWizardJobTemplate() {\n    return (\n        <Fragment>\n            <FormWizardTextInput\n                id=\"name\"\n                label=\"Ansible job template name\"\n                placeholder=\"Enter or select Ansible job template name\"\n                required\n            />\n            <FormWizardKeyValue id=\"extra_vars\" label=\"Extra variables\" placeholder=\"Add variable\" />\n        </Fragment>\n    )\n}\n","import { useCallback, useMemo } from 'react'\nimport { useHistory } from 'react-router'\nimport { RouteE } from '../Routes'\nimport { AnsibleWizard } from './AnsibleWizard'\n\nexport function AnsibleExample() {\n    const history = useHistory()\n    const onSubmit = useCallback(\n        (data: object) => {\n            sessionStorage.setItem('results', JSON.stringify(data))\n            history.push(RouteE.Results)\n            return Promise.resolve()\n        },\n        [history]\n    )\n    const credentials = useMemo(() => ['my-ansible-creds'], [])\n    return <AnsibleWizard onSubmit={onSubmit} credentials={credentials} />\n}\n","var _g, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgArgoIcon = function SvgArgoIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"9.28 -8.28 64 64\",\n    width: 64,\n    height: 64\n  }, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"#fefefe\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.745 43.623c.005 0 .01.017.01.05l.017.7.105-.534c-.028-.336-.292-.165-.132-.204zM52.2 24.782c-.005.005-.017.005-.022.01.005.005.017.01.022.017-.005-.005 0-.017 0-.028zM43.094 1.654z\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m50.835 48.102.132-2.402c.22-1.746.01-3.53.468-5.256.226-.892-.496-1.94.43-2.722l-.23-.76c-.26-.43-.127-.848.028-1.267-.017-1.532 0-3.063.275-4.578l.253-6.32c-.005-.005-.017-.01-.022-.017-4.5 2.066-8.743-.826-9.465-4.297-.474-2.28-.22-4.435 1.56-6.176.297-.292.55-.628.826-.948.727-4.36.2-8.36-3.504-11.476.556-.32 1.058-.138 1.5-.22-4.56-1.15-10.1 1.975-11.936 6.747-.55 1.432-.848 2.9-.755 4.446 4.53-2.1 8.6.408 9.707 4.226 1.162 3.972-1.934 8.176-6.05 8.236-1.2.017-2.34-.182-3.476-.518l.253 6.578c.16 1.438.33 2.87.26 4.32l.033 1.025-.033.683c.336 1.377.408 2.793.512 4.204a.78.78 0 0 1-.022-.11c.005.04.017.072.022.1l.347 7.195c.072.992-.286 1.487-1.2 1.74-1.08.303-2.143.667-3.212 1.008 1.432.198 2.843.22 4.253.187 1.526-.033 2.22-.7 2.37-2.226l.264-2.892.297-5.245h.215v4.986l.088 2.27c.22 3.52.325 3.498-3.184 4.2-.083.017-.154.066-.23.1l.628.42c.066.017.12.044.154.105.837.005 1.68.077 2.507 0 1.504-.143 2.215-.948 2.325-2.44.066-.96.165-1.917.248-2.876-.132-1.273.06-2.523.297-3.774l-.017-.7c0-.033-.01-.055-.01-.05-.16.04.105-.132.132.204l.088-.446v5.774l.05 2.027c.028 2.452-.127 2.672-2.463 3.372-.645.193-1.317.3-1.956.523-.463.16-1.052.072-1.487.617 1.9-.072 3.68.143 5.45-.143 1.83-.297 2.556-1.036 2.93-2.82.275-1.3.4-2.66.892-4 .072.143.127.2.143.286l.75 3.724c.342 1.735 1.047 2.474 2.8 2.782 1.824.314 3.67.1 5.56.143-.27-.463-.694-.386-1.036-.485-1.173-.342-2.37-.634-3.52-1.03-.837-.292-1.438-.826-1.427-1.857l.01-8.462H45l.358 5.3c.215 4.088.7 4.534 4.804 4.308.23-.386.8-.083 1.014-.496-.986-.005-1.846-.48-2.75-.782-.507-.17-.793-.628-.782-1.2.044-2.898-.066-5.807.325-8.694l.612 7.278c.088 1.135.6 2.022 1.8 2.1 1.6.1 3.223.028 4.837.028-.854-.43-1.73-.683-2.6-.96-1.972-.634-1.96-.64-1.78-2.644zM38.428 6.767a1.48 1.48 0 0 1-1.465 1.465c-.865.017-1.515-.48-1.532-1.603.094-.815.55-1.372 1.52-1.394 1.03-.017 1.493.678 1.476 1.532zm6.622 24.097c.005 2.23-1.702 4.176-3.653 4.17-1.84-.005-3.72-2.176-3.653-4.226l-.342-2.066c1.317.898 2.424 1.818 3.906 1.85 1.515.028 2.705-.75 3.945-1.658.264.727-.402 1.295-.204 1.928z\",\n    fill: \"#fe733e\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m31.095 35.7-.32-.127c-1.5-.617-2.815-1.565-4.027-2.617-4.374-3.78-7.26-8.512-7.96-14.252-.793-6.523.667-12.545 5.02-17.718 3.972-4.716 9.035-7.465 15.08-8.1 6.716-.7 12.748 1.18 17.828 5.818 4.237 3.867 6.7 8.66 7.344 14.296.54 4.8-.325 9.437-2.793 13.652-2.242 3.83-5.228 6.936-9.267 8.903l-.33.16c-.154.42-.292.837-.028 1.267.094-.083.176-.187.286-.248 6.1-3.228 10.33-8.027 12.308-14.704.17-.567.435-.848 1.07-.782.86.088 1.1-.485 1.1-1.2l.005-8.242c0-.6-.143-1.24-.755-1.306-1.124-.132-1.262-.953-1.487-1.752C62.834 4.1 60.3.222 56.5-2.748c-7.768-6.1-16.296-7.2-25.243-3.08C24.616-2.77 20.38 2.536 18.463 9.637c-.12.44-.066.964-.815.8-1.07-.22-1.47.408-1.476 1.355l-.005 8.242c0 .915.463 1.4 1.344 1.184.8-.198 1.003.204 1.168.82.716 2.633 1.912 5.04 3.53 7.24 2.37 3.212 5.256 5.8 8.925 7.432l-.04-1.03z\",\n    fill: \"#b5d2f3\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.1 37.398c-.815 2.286-2.986 2.23-4.832 2.804 1.388.358 2.8.77 4.187.534.826-.143.986.154 1.107.645l.028.116.022.1c-.105-1.416-.176-2.826-.512-4.2z\",\n    fill: \"#fe684b\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M51.435 40.45c1.763.8 3.427-.005 5.13-.237-1.664-.705-3.818-.342-4.694-2.485-.93.782-.2 1.83-.435 2.722z\",\n    fill: \"#fe6446\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m37.965 43.38-.088.446-.105.534c-.237 1.25-.43 2.5-.297 3.774.413.215.1.782.5 1.014V43.38z\",\n    fill: \"#fed6c8\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m34.73 41.365-.297 5.245.512-.26v-4.986h-.215z\",\n    fill: \"#feebe3\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.553 53.452h2.843l-.154-.105-.628-.42c-.623-.033-1.207.105-2.06.523z\",\n    fill: \"#fe9166\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.168 53.452h2.766c-.562-.325-1.113-.6-1.752-.496-.215.42-.788.1-1.014.496z\",\n    fill: \"#fe8f64\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.003 35.54c4.038-1.96 7.02-5.068 9.267-8.903 2.468-4.215 3.333-8.853 2.793-13.652C63.43 7.345 60.96 2.552 56.72-1.3 51.64-5.943 45.607-7.827 38.9-7.122c-6.038.628-11.107 3.383-15.08 8.1C19.454 6.15 18 12.17 18.793 18.694c.7 5.746 3.587 10.473 7.96 14.252 1.218 1.052 2.523 2.005 4.027 2.617.105.044.2.088.32.127.072-1.45-.1-2.88-.26-4.32l-.33-.237c-1.118-.8-2.077-1.807-3.04-2.788-.292-.297-.656-.55-.656-1.036-.65.468-1.118.143-1.5-.375-2.116-2.887-3.394-6.088-3.564-9.7-.154-3.184.132-6.28 1.47-9.26 1.702-3.785 4.32-6.677 7.834-8.826.595-.364.937-.04 1.35.23.402-.04.76-.176 1.02-.507l-.05-.116c-.353-.744-.37-1.587.48-1.785.854-.204 1.34.5 1.344 1.388C41.572-3.726 47.5-2.877 52.85 1.205c4 3.052 6.292 7.145 7 12.137.904 6.418-1.267 11.74-5.74 16.24-.53.53-1.124 1.008-1.796 1.366a10.09 10.09 0 0 1-.347.171c-.275 1.515-.292 3.047-.275 4.578l.32-.16z\",\n    fill: \"#e2f5fc\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.1 29.6c4.468-4.5 6.64-9.823 5.74-16.24-.7-4.997-2.992-9.1-7-12.137C47.5-2.87 41.557-3.712 35.2-1.624c-.01.005-.022.017-.033.022-.5.32-.892 1.008-1.614.578-.044-.028-.083-.05-.127-.083-.26.33-.612.468-1.02.507-.017.066-.04.127-.06.193-.457 1.284-1.83 1.62-2.75 2.4-2.496 2.088-4.347 4.6-5.438 7.62-1.752 4.88-1.394 9.663.953 14.28.38.75.848 1.46 1.35 2.138a1.8 1.8 0 0 1 .353 1.284c0 .496.364.755.656 1.052.97.98 1.923 1.978 3.04 2.788l.33.237-.253-6.578c-1.917-1.256-3.317-2.854-3.56-5.234-.303-2.936.93-5.107 3.333-6.688.01-.005.022-.017.033-.022-.094-1.543.204-3.02.755-4.446C32.974 3.65 38.516.52 43.083 1.665c3.047.496 5.537 1.88 7.322 4.418 1.427 2.033 2.165 4.275 2 6.776 1.72 1.306 3.107 2.837 3.333 5.102.303 3.047-.997 5.272-3.56 6.826v.028l-.253 6.32c.12-.055.237-.1.347-.17.683-.358 1.278-.837 1.807-1.372z\",\n    fill: \"#cdecf6\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.67 12.612c1.9-.93 3.724-.43 5.548.17l.204.066c.154-2.507-.584-4.75-2-6.776-1.785-2.54-4.275-3.923-7.305-4.413-.468.088-.97-.1-1.526.22 3.724 3.118 4.237 7.118 3.504 11.476l1.587-.744z\",\n    fill: \"#fe6b3c\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.76 17.956c-.226-2.264-1.614-3.796-3.333-5.102l-.204-.066c-1.83-.6-3.658-1.102-5.548-.17l-1.24.6-.342.16-.826.948c-1.785 1.74-2.033 3.895-1.56 6.176.722 3.476 4.964 6.37 9.47 4.308.005-.005.017-.005.022-.01 2.562-1.56 3.867-3.8 3.56-6.83zm-6.738 6.088c-2.925-.022-5.206-2.347-5.18-5.283.028-2.892 2.4-5.184 5.305-5.162 2.93.022 5.173 2.33 5.15 5.294-.022 2.942-2.314 5.18-5.278 5.15z\",\n    fill: \"#fe6142\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.357 12.87c-2.402 1.58-3.636 3.752-3.333 6.688.242 2.38 1.642 3.978 3.548 5.228 1.146.342 2.28.54 3.487.523 4.1-.06 7.212-4.26 6.05-8.236-1.1-3.816-5.185-6.323-9.7-4.223-.022.005-.033.017-.044.022zm3.284 11.173c-3.003.01-5.327-2.292-5.316-5.278.005-2.93 2.292-5.2 5.24-5.217 2.98-.017 5.36 2.33 5.35 5.26-.01 2.88-2.374 5.223-5.272 5.234z\",\n    fill: \"#fe6143\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.44 31.294c-.204-.204-.353-.48-.694-.485-.066 2.05 1.807 4.22 3.653 4.226 1.956.005 3.658-1.94 3.653-4.17-.738.38-1.207 1.162-2.055 1.394-1.7.463-3.245.347-4.556-.964z\",\n    fill: \"#070909\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.254 28.936c-1.24.9-2.424 1.686-3.945 1.658-1.487-.028-2.6-.953-3.906-1.85l.342 2.066c.342.01.5.28.694.485 1.306 1.3 2.865 1.427 4.556.964.848-.23 1.317-1.008 2.055-1.394-.198-.634.468-1.2.204-1.928z\",\n    fill: \"#fdfcfb\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.952 5.24c-.975.017-1.432.573-1.52 1.394.017 1.124.667 1.614 1.532 1.603a1.48 1.48 0 0 0 1.465-1.465c.017-.86-.446-1.554-1.476-1.532z\",\n    fill: \"#fea777\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M26.804 27.3a1.8 1.8 0 0 0-.353-1.284c-.496-.678-.97-1.388-1.35-2.138-2.347-4.617-2.7-9.4-.953-14.28 1.1-3.03 2.942-5.53 5.438-7.62.92-.77 2.292-1.102 2.75-2.4.022-.06.044-.127.06-.193-.413-.27-.755-.595-1.35-.23-3.515 2.15-6.132 5.04-7.834 8.826-1.34 2.98-1.625 6.077-1.47 9.26.176 3.598 1.45 6.804 3.564 9.7.38.518.854.843 1.5.375z\",\n    fill: \"#fdfefe\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.15-1.602c.01-.005.022-.017.033-.022-.01-.898-.5-1.592-1.344-1.388s-.832 1.047-.48 1.785l.05.116a1.36 1.36 0 0 0 .127.083c.722.435 1.113-.26 1.614-.573z\",\n    fill: \"#fbfdfe\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.3 18.898c.022-2.958-2.22-5.267-5.15-5.294-2.92-.022-5.278 2.27-5.305 5.162a5.18 5.18 0 0 0 5.179 5.283c2.964.022 5.256-2.215 5.278-5.15zm-5.02.573c-.992.017-1.57-.545-1.658-1.52-.083-.9.733-1.757 1.636-1.697.97.072 1.515.64 1.63 1.653-.132.904-.595 1.548-1.6 1.565zm-15.717-5.917c-2.947.017-5.228 2.286-5.24 5.217-.005 2.986 2.314 5.3 5.316 5.278 2.898-.01 5.26-2.352 5.272-5.228.005-2.936-2.374-5.283-5.35-5.267zm.005 5.917c-.98.01-1.57-.55-1.647-1.537-.072-.9.75-1.752 1.658-1.675.96.083 1.52.64 1.6 1.653-.12.93-.628 1.548-1.62 1.56z\",\n    fill: \"#fefefe\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.26 16.254c-.904-.066-1.72.782-1.636 1.697.088.98.667 1.537 1.658 1.52 1.008-.017 1.476-.66 1.6-1.565-.116-1.014-.66-1.58-1.63-1.653z\",\n    fill: \"#090b0b\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.58 16.26c-.9-.077-1.73.766-1.658 1.675.077.986.667 1.548 1.647 1.537.992-.01 1.5-.628 1.62-1.56-.094-1.02-.656-1.576-1.6-1.653z\",\n    fill: \"#090c0c\"\n  })));\n};\n\nexport default SvgArgoIcon;","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgHelmIcon = function SvgHelmIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-hidden\": \"true\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.337 0c-.475 0-.861 1.016-.861 2.269 0 .527.069 1.011.183 1.396a8.514 8.514 0 0 0-3.961 1.22 5.229 5.229 0 0 0-.595-1.093c-.606-.866-1.34-1.436-1.79-1.43a.381.381 0 0 0-.217.066c-.39.273-.123 1.326.596 2.353.267.381.559.705.84.948a8.683 8.683 0 0 0-1.528 1.716h1.734a7.179 7.179 0 0 1 5.381-2.421 7.18 7.18 0 0 1 5.382 2.42h1.733a8.687 8.687 0 0 0-1.32-1.53c.35-.249.735-.643 1.078-1.133.719-1.027.986-2.08.596-2.353a.382.382 0 0 0-.217-.065c-.45-.007-1.184.563-1.79 1.43a4.897 4.897 0 0 0-.676 1.325 8.52 8.52 0 0 0-3.899-1.42c.12-.39.193-.887.193-1.429 0-1.253-.386-2.269-.862-2.269zM1.624 9.443v5.162h1.358v-1.968h1.64v1.968h1.357V9.443H4.62v1.838H2.98V9.443zm5.912 0v5.162h3.21v-1.108H8.893v-.95h1.64v-1.142h-1.64v-.84h1.853V9.443zm4.698 0v5.162h3.218v-1.362h-1.86v-3.8zm4.706 0v5.162h1.364v-2.643l1.357 1.225 1.35-1.232v2.65h1.365V9.443h-.614l-2.1 1.914-2.109-1.914zm-11.82 7.28a8.688 8.688 0 0 0 1.412 1.548 5.206 5.206 0 0 0-.841.948c-.719 1.027-.985 2.08-.596 2.353.39.273 1.289-.338 2.007-1.364a5.23 5.23 0 0 0 .595-1.092 8.514 8.514 0 0 0 3.961 1.219 5.01 5.01 0 0 0-.183 1.396c0 1.253.386 2.269.861 2.269.476 0 .862-1.016.862-2.269 0-.542-.072-1.04-.193-1.43a8.52 8.52 0 0 0 3.9-1.42c.121.4.352.865.675 1.327.719 1.026 1.617 1.637 2.007 1.364.39-.273.123-1.326-.596-2.353-.343-.49-.727-.885-1.077-1.135a8.69 8.69 0 0 0 1.202-1.36h-1.771a7.174 7.174 0 0 1-5.227 2.252 7.174 7.174 0 0 1-5.226-2.252z\",\n    fill: \"currentColor\"\n  })));\n};\n\nexport default SvgHelmIcon;","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgObjectStore = function SvgObjectStore(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-hidden\": \"true\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 36 36\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"ObjectStore_svg__clr-i-outline ObjectStore_svg__clr-i-outline-path-1\",\n    d: \"M33 6.69c-.18-3.41-9.47-4.33-15-4.33S3 3.29 3 6.78v22.59c0 3.49 9.43 4.43 15 4.43s15-.93 15-4.43V6.69zm-2 7.56c-.33.86-5.06 2.45-13 2.45a37.45 37.45 0 0 1-11-1.36v2.08a43.32 43.32 0 0 0 11 1.28c4 0 9.93-.48 13-2v5.17c-.33.86-5.06 2.45-13 2.45a37.45 37.45 0 0 1-11-1.4V25a43.32 43.32 0 0 0 11 1.28c4 0 9.93-.48 13-2v5.1c-.35.86-5.08 2.45-13 2.45S5.3 30.2 5 29.37V6.82c.3-.82 5-2.46 13-2.46 7.77 0 12.46 1.53 13 2.37-.52.87-5.21 2.39-13 2.39A37.6 37.6 0 0 1 7 7.76v2.09a43.53 43.53 0 0 0 11 1.27c4 0 9.93-.48 13-2z\",\n    fill: \"currentColor\"\n  })));\n};\n\nexport default SvgObjectStore;","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgSubscriptionIcon = function SvgSubscriptionIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-hidden\": \"true\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 19h5v4l-2.5-1.5L6 23v-4zM20 1h-8v22l2.5-1.5L17 23v-2h3a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm-6 4h2v2h-2zm0 5h2v2h-2zm0 5h2v2h-2zM4 1a2.006 2.006 0 0 0-2 2v16a2.006 2.006 0 0 0 2 2V3h7V1z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 5h2v2H6zM6 10h2v2H6zM6 15h2v2H6z\",\n    fill: \"currentColor\"\n  })));\n};\n\nexport default SvgSubscriptionIcon;","import { Split, Stack } from '@patternfly/react-core'\nimport { GitAltIcon } from '@patternfly/react-icons'\nimport Handlebars from 'handlebars'\nimport { Fragment, useMemo } from 'react'\nimport {\n    FormWizardArrayInput,\n    FormWizardCheckbox,\n    FormWizardHidden,\n    FormWizardLabels,\n    FormWizardPage,\n    FormWizardRadio,\n    FormWizardRadioGroup,\n    FormWizardSection,\n    FormWizardSelect,\n    FormWizardStep,\n    FormWizardTextDetail,\n    FormWizardTextInput,\n    FormWizardTile,\n    FormWizardTiles,\n    FormWizardTimeRange,\n} from '../../src'\nimport ApplicationHandlebars from './applicationTemplates/App.hbs'\nimport ArgoAppSetHandlebars from './applicationTemplates/argoApplicationSet/ArgoApplication.hbs'\nimport ArgoTemplateGit from './applicationTemplates/argoApplicationSet/templateArgoGit.hbs'\nimport ArgoTemplateHelm from './applicationTemplates/argoApplicationSet/templateArgoHelm.hbs'\nimport ArgoTemplatePlacement from './applicationTemplates/argoApplicationSet/templateArgoPlacement.hbs'\nimport SubscriptionHandlebars from './applicationTemplates/subscription/Application.hbs'\nimport SubscriptionGitHandlebars from './applicationTemplates/subscription/templateSubscriptionGit.hbs'\nimport SubscriptionHelmHandlebars from './applicationTemplates/subscription/templateSubscriptionHelm.hbs'\nimport SubscriptionObjHandlebars from './applicationTemplates/subscription/templateSubscriptionObj.hbs'\nimport SubscriptionPlacementHandlebars from './applicationTemplates/subscription/templateSubscriptionPlacement.hbs'\nimport ArgoIcon from './logos/ArgoIcon.svg'\nimport HelmIcon from './logos/HelmIcon.svg'\nimport ObjectStore from './logos/ObjectStore.svg'\nimport SubscriptionIcon from './logos/SubscriptionIcon.svg'\n\nexport function AppForm() {\n    Handlebars.registerPartial('templateSubscription', Handlebars.compile(SubscriptionHandlebars))\n    Handlebars.registerPartial('templateSubscription', Handlebars.compile(SubscriptionHandlebars))\n    Handlebars.registerPartial('templateSubscriptionGit', Handlebars.compile(SubscriptionGitHandlebars))\n    Handlebars.registerPartial('templateSubscriptionHelm', Handlebars.compile(SubscriptionHelmHandlebars))\n    Handlebars.registerPartial('templateSubscriptionObj', Handlebars.compile(SubscriptionObjHandlebars))\n    Handlebars.registerPartial('templateSubscriptionPlacement', Handlebars.compile(SubscriptionPlacementHandlebars))\n    Handlebars.registerPartial('templateArgoCD', Handlebars.compile(ArgoAppSetHandlebars))\n    Handlebars.registerPartial('templateArgoGit', Handlebars.compile(ArgoTemplateGit))\n    Handlebars.registerPartial('templateArgoHelm', Handlebars.compile(ArgoTemplateHelm))\n    Handlebars.registerPartial('templateArgoPlacement', Handlebars.compile(ArgoTemplatePlacement))\n    const namespaces = useMemo(() => ['default', 'namespace-1', 'namespace-2'], [])\n    const reconcileOptions = useMemo(() => ['merge', 'replace'], [])\n    const reconcileRates = useMemo(() => ['medium', 'low', 'high', 'off'], [])\n    const servers = useMemo(() => ['default', 'server-1', 'server-2'], [])\n    const requeueTimes = useMemo(() => [30, 60, 120, 180, 300], [])\n    const urls = useMemo(() => ['url1', 'url2'], [])\n    const urlOptions = useMemo(() => ['url1', 'url2'], [])\n    const ansibleCredentials = useMemo(() => ['credential1', 'credential2'], [])\n    return (\n        <FormWizardPage\n            title=\"Create application\"\n            template={ApplicationHandlebars}\n            breadcrumb={[{ label: 'Home', to: '.' }, { label: 'Applications' }]}\n            defaultData={{ curlyServer: '{{server}}', curlyName: '{{name}}' }}\n        >\n            <FormWizardStep label=\"Type\">\n                <FormWizardSection label=\"Type\" prompt=\"Type\">\n                    <FormWizardTiles\n                        id=\"deployType\"\n                        label=\"Select the application management type to deploy this application into clusters.\"\n                    >\n                        <FormWizardTile\n                            id=\"subscription\"\n                            value=\"Subscription\"\n                            label=\"Subscription\"\n                            icon={<SubscriptionIcon />}\n                            description=\"Subscriptions are Kubernetes resources within channels (source repositories)\"\n                        />\n                        <FormWizardTile\n                            id=\"argoCD\"\n                            value=\"ArgoCD\"\n                            label=\"Argo CD ApplicationSet\"\n                            icon={<ArgoIcon />}\n                            description=\"Supports deployments to large numbers of clusters, deployments of large monorepos, and enabling secure Application self-service.\"\n                        />\n                    </FormWizardTiles>\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Details\" hidden={(item) => item.deployType !== 'Subscription'}>\n                <FormWizardSection label=\"Details\" prompt=\"Enter the details of the application\">\n                    <FormWizardTextInput id=\"name\" label=\"Application name\" required />\n                    <FormWizardSelect\n                        id=\"namespace\"\n                        label=\"Namespace\"\n                        placeholder=\"Select the namespace\"\n                        helperText=\"The namespace on the hub cluster where the application resources will be created.\"\n                        options={namespaces}\n                        required\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Repositories\" hidden={(item) => item.deployType !== 'Subscription'}>\n                <FormWizardSection label=\"Repositories\" prompt=\"Enter the application repositories\">\n                    <FormWizardArrayInput\n                        id=\"repositories\"\n                        placeholder=\"Add repository\"\n                        collapsedText={<FormWizardTextDetail id=\"url\" placeholder=\"Expand to enter the repository details\" />}\n                    >\n                        <FormWizardTiles id=\"repositoryType\" label=\"Repository type\">\n                            <FormWizardTile\n                                id=\"git\"\n                                value=\"SubscriptionGit\"\n                                label=\"Git\"\n                                icon={<GitAltIcon />}\n                                description=\"Use a Git repository\"\n                            />\n                            <FormWizardTile\n                                id=\"helm\"\n                                value=\"SubscriptionHelm\"\n                                label=\"Helm\"\n                                icon={<HelmIcon />}\n                                description=\"Use a Helm repository\"\n                            />\n                            <FormWizardTile\n                                id=\"objectstorage\"\n                                value=\"SubscriptionObjectstorage\"\n                                icon={<ObjectStore />}\n                                label=\"Object Storage\"\n                                description=\"Use a bucket from an object storage repository\"\n                            />\n                        </FormWizardTiles>\n\n                        <FormWizardHidden hidden={(data) => data.repositoryType !== 'SubscriptionGit'}>\n                            <FormWizardSelect\n                                id=\"subscription.git.url\"\n                                label=\"URL\"\n                                placeholder=\"Enter or select a Git URL\"\n                                labelHelp=\"The URL path for the Git repository.\"\n                                options={urls}\n                                required\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.git.username\"\n                                label=\"Username\"\n                                placeholder=\"Enter the Git user name\"\n                                labelHelp=\"The username if this is a private Git repository and requires connection.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.git.accessToken\"\n                                label=\"Access token\"\n                                placeholder=\"Enter the Git access token\"\n                                labelHelp=\"The access token if this is a private Git repository and requires connection.\"\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.git.branch\"\n                                label=\"Branch\"\n                                placeholder=\"Enter or select a branch\"\n                                labelHelp=\"The branch of the Git repository.\"\n                                options={urls}\n                                required\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.git.path\"\n                                label=\"Path\"\n                                placeholder=\"Enter or select a repository path\"\n                                labelHelp=\"The location of the resources on the Git repository.\"\n                                options={urls}\n                                required\n                            />\n\n                            <FormWizardTextInput\n                                id=\"subscription.git.commitHash\"\n                                label=\"Commit hash\"\n                                placeholder=\"Enter a specific commit hash\"\n                                labelHelp=\"If you want to subscribe to a specific commit, you need to specify the desired commit hash. You might need to specify git-clone-depth annotation if your desired commit is older than the last 20 commits.\"\n                            />\n\n                            <FormWizardTextInput\n                                id=\"subscription.git.tag\"\n                                label=\"Tag\"\n                                placeholder=\"Enter a specific tag\"\n                                labelHelp=\"If you want to subscribe to a specific tag, you need to specify the tag. If both Git desired commit and tag annotations are specified, the tag is ignored. You might need to specify git-clone-depth annotation if your desired commit of the tag is older than the last 20 commits.\"\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.git.reconcileOption\"\n                                label=\"Reconcile option\"\n                                labelHelp=\"With the Merge option, new fields are added and existing fields are updated in the resource. Choose to merge if resources are updated after the initial deployment. If you choose to replace, the existing resource is replaced with the Git source.\"\n                                options={reconcileOptions}\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.git.reconcileRate\"\n                                label=\"Repository reconcile rate\"\n                                labelHelp=\"The frequency of resource reconciliation that is used as a global repository setting. The medium default setting checks for changes to apply every three minutes and re-applies all resources every 15 minutes, even without a change. Select low to reconcile every hour. Select high to reconcile every two minutes. If you select off, the deployed resources are not automatically reconciled.\"\n                                options={reconcileRates}\n                            />\n                            <FormWizardCheckbox\n                                id=\"subscription.git.subReconcileRate\"\n                                label=\"Disable auto-reconciliation\"\n                                labelHelp=\"Turn the auto-reconciliation off for this specific application regardless of the reconcile rate setting in the repository.\"\n                            />\n                            <FormWizardCheckbox\n                                id=\"subscription.git.insecureSkipVerify\"\n                                label=\"Disable server certificate verification\"\n                                labelHelp=\"Disable server TLS certificate verification for Git server connection.\"\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.git.ansibleSecretName\"\n                                label=\"Ansible Automation Platform credential\"\n                                labelHelp=\"If using Configure automation for prehook and posthook tasks, select the Ansible Automation Platform credential. Click the Add credentials tab to create a new secret.\"\n                                options={ansibleCredentials}\n                            />\n                        </FormWizardHidden>\n\n                        <FormWizardHidden hidden={(data) => data.repositoryType !== 'SubscriptionHelm'}>\n                            <FormWizardSelect\n                                id=\"subscription.helm.url\"\n                                label=\"URL\"\n                                placeholder=\"Enter or select a Helm repository URL\"\n                                labelHelp=\"The URL path for the Helm repository.\"\n                                options={urls}\n                                required\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.helm.username\"\n                                label=\"Username\"\n                                placeholder=\"Enter the Helm repository username\"\n                                labelHelp=\"The username if this is a private Helm repository and requires connection.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.helm.password\"\n                                label=\"Password\"\n                                placeholder=\"Enter the Helm repository password\"\n                                labelHelp=\"The password if this is a private Helm repository and requires connection.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.helm.chart\"\n                                label=\"Chart name\"\n                                placeholder=\"Enter the name of the target Helm chart\"\n                                labelHelp=\"The specific name for the target Helm chart.\"\n                                required\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.helm.packageAlias\"\n                                label=\"Package alias\"\n                                placeholder=\"Enter the alias name of the target Helm chart\"\n                                labelHelp=\"The alias name for the target Helm chart.\"\n                                required\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.helm.packageVersion\"\n                                label=\"Package version\"\n                                placeholder=\"Enter the version or versions\"\n                                labelHelp=\"The version or versions for the deployable. You can use a range of versions in the form >1.0, or <3.0.\"\n                            />\n                            <FormWizardSelect\n                                id=\"subscription.helm.reconcileRate\"\n                                label=\"Repository reconcile rate\"\n                                labelHelp=\"The frequency of resource reconciliation that is used as a global repository setting. The medium default setting checks for changes to apply every three minutes and re-applies all resources every 15 minutes, even without a change. Select low to reconcile every hour. Select high to reconcile every two minutes. If you select off, the deployed resources are not automatically reconciled.\"\n                                options={reconcileRates}\n                                required\n                            />\n                            <FormWizardCheckbox\n                                id=\"subscription.helm.subReconcileRate\"\n                                label=\"Disable auto-reconciliation\"\n                                labelHelp=\"Turn the auto-reconciliation off for this specific application regardless of the reconcile rate setting in the repository.\"\n                            />\n                            <FormWizardCheckbox\n                                id=\"subscription.helm.insecureSkipVerify\"\n                                label=\"Disable server certificate verification\"\n                                labelHelp=\"Disable server TLS certificate verification for Git server connection.\"\n                            />\n                        </FormWizardHidden>\n\n                        <FormWizardHidden hidden={(data) => data.repositoryType !== 'SubscriptionObjectstorage'}>\n                            <FormWizardSelect\n                                id=\"subscription.obj.url\"\n                                label=\"URL\"\n                                placeholder=\"Enter or select an ObjectStore bucket URL\"\n                                labelHelp=\"The URL path for the object store.\"\n                                options={urls}\n                                required\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.obj.accessKey\"\n                                label=\"Access key\"\n                                placeholder=\"Enter the object store access key\"\n                                labelHelp=\"The access key for accessing the object store.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.obj.secretKey\"\n                                label=\"Secret key\"\n                                placeholder=\"Enter the object store secret key\"\n                                labelHelp=\"The secret key for accessing the object store.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.obj.region\"\n                                label=\"Region\"\n                                placeholder=\"Enter the AWS region of the S3 bucket\"\n                                labelHelp=\"The AWS Region of the S3 bucket. This field is required for Amazon S3 buckets only.\"\n                            />\n                            <FormWizardTextInput\n                                id=\"subscription.obj.subfolder\"\n                                label=\"Subfolder\"\n                                placeholder=\"Enter the Amazon S3 or MinIO subfolder bucket path\"\n                                labelHelp=\"The Amazon S3 or MinIO subfolder bucket path. This field is optional for Amazon S3 and MinIO only.\"\n                            />\n                        </FormWizardHidden>\n\n                        <FormWizardHidden hidden={(data) => data.repositoryType === undefined}>\n                            <Placement />\n                        </FormWizardHidden>\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"General\" hidden={(item) => item.deployType !== 'ArgoCD'}>\n                <FormWizardSection label=\"General\">\n                    <FormWizardTextInput\n                        id=\"appSetName\"\n                        label=\"ApplicationSet name\"\n                        placeholder=\"Enter the application set name\"\n                        required\n                    />\n                    <FormWizardSelect\n                        id=\"argoServer\"\n                        label=\"Argo server\"\n                        placeholder=\"Select the Argo server\"\n                        labelHelp=\"Argo server to deploy Argo app set. Click the Add cluster sets tab to create a new cluster set.\"\n                        options={servers}\n                        required\n                    />\n                    <FormWizardSelect\n                        id=\"requeueTime\"\n                        label=\"Requeue time\"\n                        options={requeueTimes}\n                        labelHelp=\"Cluster decision resource requeue time in seconds\"\n                        required\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n            <FormWizardStep label=\"Template\" hidden={(item) => item.deployType !== 'ArgoCD'}>\n                <FormWizardSection label=\"Source\">\n                    <FormWizardTiles id=\"repositoryType\" label=\"Repository type\">\n                        <FormWizardTile id=\"git\" value=\"Git\" label=\"Git\" icon={<GitAltIcon />} description=\"Use a Git repository\" />\n                        <FormWizardTile id=\"helm\" value=\"Helm\" label=\"Helm\" icon={<HelmIcon />} description=\"Use a Helm repository\" />\n                    </FormWizardTiles>\n                    {/* Git repo */}\n                    <FormWizardHidden hidden={(data) => data.repositoryType !== 'Git'}>\n                        <FormWizardSelect\n                            id=\"git.url\"\n                            label=\"URL\"\n                            labelHelp=\"The URL path for the Git repository.\"\n                            placeholder=\"Enter or select a Git URL\"\n                            options={urlOptions}\n                            required\n                        />\n                        <FormWizardSelect\n                            id=\"git.revision\"\n                            label=\"Revision\"\n                            labelHelp=\"Refer to a single commit\"\n                            placeholder=\"Enter or select a tracking revision\"\n                            options={urlOptions}\n                        />\n                        <FormWizardSelect\n                            id=\"git.path\"\n                            label=\"Path\"\n                            labelHelp=\"The location of the resources on the Git repository.\"\n                            placeholder=\"Enter or select a repository path\"\n                            options={urlOptions}\n                        />\n                    </FormWizardHidden>\n                    {/* Helm repo */}\n                    <FormWizardHidden hidden={(data) => data.repositoryType !== 'Helm'}>\n                        <FormWizardSelect\n                            id=\"helm.url\"\n                            label=\"URL\"\n                            labelHelp=\"The URL path for the Helm repository.\"\n                            placeholder=\"Enter or select a Helm URL\"\n                            options={urlOptions}\n                            required\n                        />\n                        <FormWizardTextInput\n                            id=\"helm.chart\"\n                            label=\"Chart name\"\n                            placeholder=\"Enter the name of the Helm chart\"\n                            labelHelp=\"The specific name for the target Helm chart.\"\n                            required\n                        />\n                        <FormWizardTextInput\n                            id=\"helm.packageVersion\"\n                            label=\"Package version\"\n                            placeholder=\"Enter the version or versions\"\n                            labelHelp=\"The version or versions for the deployable. You can use a range of versions in the form >1.0, or <3.0.\"\n                            required\n                        />\n                    </FormWizardHidden>\n                </FormWizardSection>\n                <FormWizardSection label=\"Destination\">\n                    <FormWizardTextInput\n                        id=\"remoteNamespace\"\n                        label=\"Remote namespace\"\n                        placeholder=\"Enter the destination namespace\"\n                        required\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Sync policy\" hidden={(item) => item.deployType !== 'ArgoCD'}>\n                <FormWizardSection\n                    label=\"Sync policy\"\n                    description=\"Settings used to configure application syncing when there are differences between the desired state and the live cluster state.\"\n                >\n                    {/* Git only sync policies */}\n                    <FormWizardHidden hidden={(data) => data.repositoryType !== 'Git'}>\n                        <FormWizardCheckbox id=\"syncPolicy.prune\" label=\"Delete resources that are no longer defined in Git\" />\n                        <FormWizardCheckbox\n                            id=\"syncPolicy.pruneLast\"\n                            label=\"Delete resources that are no longer defined in Git at the end of a sync operation\"\n                        />\n                        <FormWizardCheckbox id=\"syncPolicy.replace\" label=\"Replace resources instead of applying changes from Git\" />\n                    </FormWizardHidden>\n                    <FormWizardCheckbox id=\"syncPolicy.allowEmpty\" label=\"Allow applications to have empty resources\" />\n                    <FormWizardCheckbox id=\"syncPolicy.applyOutOfSyncOnly\" label=\"Only synchronize out-of-sync resources\" />\n                    <FormWizardCheckbox id=\"syncPolicy.selfHeal\" label=\"Automatically sync when cluster state changes\" />\n                    <FormWizardCheckbox id=\"syncPolicy.createNamespace\" label=\"Automatically create namespace if it does not exist\" />\n                    <FormWizardCheckbox id=\"syncPolicy.validate\" label=\"Disable kubectl validation\" />\n                    <FormWizardCheckbox id=\"syncPolicy.prunePropagationPolicy\" label=\"Prune propagation policy\">\n                        <FormWizardSelect\n                            id=\"syncPolicy.propagationPolicy\"\n                            label=\"Propogation policy\"\n                            options={['foreground', 'background', 'orphan']}\n                            required\n                        />\n                    </FormWizardCheckbox>\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Placement\" hidden={(item) => item.deployType !== 'ArgoCD'}>\n                <Placement />\n            </FormWizardStep>\n        </FormWizardPage>\n    )\n}\n\nexport function Placement() {\n    const labelOptions = useMemo(() => [{ id: 'amazon', label: 'cloud', value: 'Amazon' }], [])\n    return (\n        <Fragment>\n            <FormWizardSection label=\"Cluster placement\" description=\"Applications are deployed to clusters based on placements\">\n                <FormWizardCheckbox\n                    id=\"placement.useLabels\"\n                    label=\"New placement\"\n                    labelHelp=\"Deploy application resources only on clusters matching specified labels\"\n                >\n                    <FormWizardLabels\n                        id=\"placement.labels\"\n                        label=\"Cluster labels\"\n                        placeholder=\"Enter cluster labels\"\n                        helperText=\"Placement will only select clusters matching all the specified labels\"\n                        required\n                        options={labelOptions}\n                    />\n                </FormWizardCheckbox>\n                <FormWizardCheckbox\n                    id=\"placement.useExisting\"\n                    label=\"Use an existing placement\"\n                    labelHelp=\"If available in the application namespace, you can select a predefined placement configuration\"\n                >\n                    <FormWizardSelect\n                        id=\"placement.select\"\n                        label=\"Placement\"\n                        placeholder=\"Select an existing placement\"\n                        options={['my-placement-rule-1']}\n                        required\n                    />\n                </FormWizardCheckbox>\n                <FormWizardCheckbox\n                    id=\"placement.allClusters\"\n                    label=\"Deploy to all online clusters and local cluster\"\n                    labelHelp=\"Deploy your application resources on all online clusters, including your local cluster.\"\n                ></FormWizardCheckbox>\n                <FormWizardCheckbox\n                    id=\"placement.local\"\n                    label=\"Deploy on local cluster\"\n                    labelHelp=\"Deploy application resources on local cluster only\"\n                ></FormWizardCheckbox>\n            </FormWizardSection>\n            <DeploymentWindow />\n        </Fragment>\n    )\n}\n\nexport function DeploymentWindow() {\n    return (\n        <FormWizardSection\n            id=\"deploymentWindow.title\"\n            label=\"Deployment window\"\n            description=\"Schedule a time window for deployments\"\n            labelHelp=\"Define a time window if you want to activate or block resources deployment within a certain time interval.\"\n        >\n            <FormWizardRadioGroup\n                id=\"remediation\"\n                path=\"deployment.window\"\n                required\n                // hidden={get(resources, 'DELEM') === undefined}\n            >\n                <FormWizardRadio id=\"always\" label=\"Always active\" value=\"always\" />\n                <FormWizardRadio id=\"active\" label=\"Active within specified interval\" value=\"active\">\n                    <TimeWindow />\n                </FormWizardRadio>\n                <FormWizardRadio id=\"blocked\" label=\"Blocked within specified interval\" value=\"blocked\">\n                    <TimeWindow />\n                </FormWizardRadio>\n            </FormWizardRadioGroup>\n        </FormWizardSection>\n    )\n}\n\nexport function TimeWindow() {\n    return (\n        <Stack hasGutter style={{ paddingBottom: 16 }}>\n            {/* TODO InputCheckBoxGroup */}\n            {/* <FormWizardSection title=\"Deployment window\"> */}\n            <FormWizardCheckbox id=\"timeWindow.sunday\" label=\"Sunday\" />\n            <FormWizardCheckbox id=\"timeWindow.monday\" label=\"Monday\" />\n            <FormWizardCheckbox id=\"timeWindow.tuesday\" label=\"Tuesday\" />\n            <FormWizardCheckbox id=\"timeWindow.wednesday\" label=\"Wednesday\" />\n            <FormWizardCheckbox id=\"timeWindow.thursday\" label=\"Thursday\" />\n            <FormWizardCheckbox id=\"timeWindow.friday\" label=\"Friday\" />\n            <FormWizardCheckbox id=\"timeWindow.saturday\" label=\"Saturday\" />\n            {/* </FormWizardSection> */}\n            <FormWizardSelect id=\"timeWindow.timezone\" label=\"Time zone\" placeholder=\"Select the time zone\" options={['EST']} required />\n            <FormWizardArrayInput\n                id=\"timeWindows\"\n                placeholder=\"Add time range\"\n                collapsedText={\n                    <Fragment>\n                        <FormWizardTextDetail id=\"start\" placeholder=\"Expand to enter the variable\" />\n                        <FormWizardHidden hidden={(item: ITimeRangeVariableData) => item.end === undefined}>\n                            &nbsp;-&nbsp;\n                            <FormWizardTextDetail id=\"end\" />\n                        </FormWizardHidden>\n                    </Fragment>\n                }\n            >\n                <Split hasGutter>\n                    <FormWizardTimeRange id=\"start\" label=\"Start Time\"></FormWizardTimeRange>\n                    <FormWizardTimeRange id=\"end\" label=\"End Time\"></FormWizardTimeRange>\n                </Split>\n            </FormWizardArrayInput>\n        </Stack>\n    )\n}\n\ninterface ITimeRangeVariableData {\n    start: string\n    end: string\n}\n","/* Copyright Contributors to the Open Cluster Management project */\n// eslint-disable-next-line no-use-before-define\nimport {\n    FormWizardArrayInput,\n    FormWizardCheckbox,\n    FormWizardLabels,\n    FormWizardMultiselect,\n    FormWizardPage,\n    FormWizardSection,\n    FormWizardSelect,\n    FormWizardStep,\n    FormWizardTextDetail,\n    FormWizardTextInput,\n    FormWizardTile,\n    FormWizardTiles,\n} from '../../src'\nimport YamlTemplate from './Cluster.hbs'\n\nexport function ClusterForm() {\n    return (\n        <FormWizardPage title=\"Create cluster\" template={YamlTemplate} breadcrumb={[{ label: 'Managed clusters', to: '.' }]}>\n            <FormWizardStep label=\"Infrastructure provider\">\n                <FormWizardSection label=\"Infrastructure provider\" prompt=\"Select the infrastructure for the cluster\">\n                    <FormWizardTiles id=\"provider\" path=\"provider\" label=\"Cloud infrastructure providers\">\n                        <FormWizardTile id=\"aws\" value=\"aws\" label=\"Amazon Web Services\" />\n                        <FormWizardTile id=\"azr\" value=\"azr\" label=\"Microsoft Azure\" />\n                        <FormWizardTile id=\"gcp\" value=\"gcp\" label=\"Google Cloud Platform\" />\n                        <FormWizardTile id=\"ost\" value=\"ost\" label=\"Red Hat OpenStack Platform\" />\n                        <FormWizardTile id=\"vsp\" value=\"vsp\" label=\"VMWare vSphere\" />\n                        <FormWizardTile id=\"bare\" value=\"bare\" label=\"Bare metal\" />\n                    </FormWizardTiles>\n                    <FormWizardTiles id=\"centrallyManagedCredentials\" path=\"provider\" label=\"Centrally managed\">\n                        <FormWizardTile id=\"onp\" value=\"onp\" label=\"On premise\" />\n                    </FormWizardTiles>\n                </FormWizardSection>\n                <FormWizardSection label=\"Credentials\" prompt=\"Select the infrastructure for the cluster\" hidden={(item) => !item.provider}>\n                    <FormWizardSelect\n                        id=\"credential\"\n                        label=\"Infrastructure credentials\"\n                        placeholder=\"Select the credentials for the infrastructure\"\n                        options={['default']}\n                        required\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Cluster details\">\n                <FormWizardSection label=\"Cluster details\" prompt=\"Enter the cluster details\">\n                    <FormWizardTextInput id=\"name\" label=\"Cluster name\" placeholder=\"Enter the cluster name\" required />\n                    <FormWizardSelect id=\"region\" label=\"Region\" options={Object.keys(awsRegions)} />\n                    <FormWizardSelect\n                        id=\"clusterSet\"\n                        label=\"Cluster set\"\n                        placeholder=\"Select a cluster set\"\n                        helperText=\"A cluster sets is a group of clusters that can be targeted as a group.\"\n                        options={['default']}\n                        required\n                    />\n                    <FormWizardTextInput id=\"baseDnsDomain\" label=\"Base DNS domain\" placeholder=\"Enter the Base DNS domain\" />\n                    <FormWizardSelect\n                        id=\"releaseImage\"\n                        label=\"Release image\"\n                        placeholder=\"Select a release image\"\n                        options={['default']}\n                        required\n                    />\n                    <FormWizardLabels id=\"labels\" label=\"Additional labels\" />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Control plane\">\n                <ControlPlaneStep />\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Worker pools\">\n                <WorkerPoolsStep />\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Networking\">\n                <FormWizardSection\n                    label=\"Networking\"\n                    prompt=\"Enter networking options\"\n                    description=\"Configure network access for your cluster. One network is created by default.\"\n                >\n                    <FormWizardSelect id=\"networkType\" label=\"Network type\" options={['default']} required />\n\n                    <FormWizardArrayInput\n                        id=\"networks\"\n                        label=\"Networks\"\n                        placeholder=\"Add network\"\n                        collapsedText={<FormWizardTextDetail id=\"clusterCidr\" placeholder=\"Expand to edit the network\" />}\n                    >\n                        <FormWizardTextInput id=\"clusterCidr\" label=\"Cluster network CIDR\" />\n                        <FormWizardTextInput id=\"hostPrefix\" label=\"Network host prefix\" />\n                        <FormWizardTextInput id=\"serviceCidr\" label=\"Service network Cidr\" />\n                        <FormWizardTextInput id=\"machienCidr\" label=\"Machine CIDR\" />\n                    </FormWizardArrayInput>\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Proxy\">\n                <FormWizardSection\n                    label=\"Proxy\"\n                    prompt=\"Configure a proxy\"\n                    description=\"Production environments can deny direct access to the Internet and instead have an HTTP or HTTPS proxy available. You can configure a new OpenShift Container Platform cluster to use a proxy by configuring the proxy settings.\"\n                >\n                    <FormWizardCheckbox id=\"useProxy\" label=\"Use proxy\" />\n                    <FormWizardTextInput\n                        id=\"httpProxy\"\n                        label=\"Http Proxy \"\n                        helperText=\"Requires this format: http://<username>:<pswd>@<ip>:<port>\"\n                        required\n                        hidden={(item) => !item.useProxy}\n                    />\n                    <FormWizardTextInput\n                        id=\"httpsProxy\"\n                        label=\"Https Proxy\"\n                        helperText=\"Requires this format: https://<username>:<pswd>@<ip>:<port>\"\n                        required\n                        hidden={(item) => !item.useProxy}\n                    />\n                    <FormWizardTextInput\n                        id=\"noProxy\"\n                        label=\"No Proxy\"\n                        helperText=\"By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. Add sites to No Proxy to bypass the proxy if necessary.\"\n                        hidden={(item) => !item.useProxy}\n                    />\n                    <FormWizardTextInput id=\"additionalTrustBundle\" label=\"Additional Trust Bundle\" hidden={(item) => !item.useProxy} />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Automation\">\n                <FormWizardSection\n                    label=\"Automation\"\n                    prompt=\"Configure a Ansible automation\"\n                    description=\"Choose an automation job template to automatically run Ansible jobs at different stages of a cluster's life cycle. To use this feature, the Ansible Automation Platform Resource Operator must be installed.\"\n                >\n                    <FormWizardSelect id=\"ansibleTemplate\" label=\"Ansible Automation Template\" options={['default']} />\n                </FormWizardSection>\n            </FormWizardStep>\n        </FormWizardPage>\n    )\n}\n\nexport function ControlPlaneStep() {\n    return (\n        <FormWizardSection\n            label=\"Control plane\"\n            prompt=\"Enter the control plane details\"\n            description=\"Three control plane nodes will be created to control this cluster unless single node is enabled, in which case there will only be one control plane node.\"\n        >\n            <FormWizardMultiselect id=\"zones\" label=\"Zones\" options={awsRegions['us-east-1']} />\n            <FormWizardSelect\n                id=\"instanceType\"\n                label=\"Instance type\"\n                placeholder=\"Select the instance type\"\n                options={AWSmasterInstanceTypes.map((instanceType) => ({ value: instanceType.value, label: instanceType.description }))}\n                required\n            />\n            <FormWizardSelect id=\"rootStorage\" label=\"Root storage (GiB)\" options={['default']} />\n        </FormWizardSection>\n    )\n}\n\nexport function WorkerPoolsStep() {\n    return (\n        <FormWizardSection\n            label=\"Worker pools\"\n            prompt=\"Enter the worker pools\"\n            description=\"One or more worker nodes will be created to run the container workloads in this cluster.\"\n        >\n            <FormWizardArrayInput\n                id=\"workerPools\"\n                label=\"Worker pools\"\n                placeholder=\"Add worker pool\"\n                collapsedText={<FormWizardTextDetail id=\"name\" placeholder=\"Expand to edit the worker pool details\" />}\n            >\n                <FormWizardTextInput id=\"name\" label=\"Pool name\" />\n                <FormWizardSelect id=\"zones\" label=\"Zones\" options={['default']} />\n                <FormWizardSelect id=\"instanceType\" label=\"Instance type\" options={['default']} />\n                {/* <FormWizardnumber */}\n                <FormWizardSelect id=\"rootStorage\" label=\"Root storage (GiB)\" options={['default']} />\n            </FormWizardArrayInput>\n        </FormWizardSection>\n    )\n}\n\n// Ideally, we should use aws-sdk and the connection credentials to fetch this information,\n// falling back to a pre-generated list if we can't connect.\n// Generate list wita the following script, then move us-* to the top\n// Add in opt-in regions: af-south-1, ap-east-1, ap-northeast-3, me-south-1\n/*\nfor region in `aws ec2 describe-regions --output json | jq -r '.Regions[].RegionName' | sort`\ndo\n  echo -n \"  '$region': \"\n  aws ec2 describe-availability-zones --region $region --output json | jq -c '[ .AvailabilityZones[].ZoneName ]' | sed -e \"s/\\\"/'/g\" -e 's/,/, /g' -e 's/]/],/g'\ndone\n*/\nconst usEast1a = 'us-east-1a'\nconst usEast1b = 'us-east-1b'\nconst usEast1c = 'us-east-1c'\nconst usEast1d = 'us-east-1d'\nconst usEast1e = 'us-east-1e'\nconst usEast1f = 'us-east-1f'\nconst gp2Cpu8Gib = '2 vCPU, 8 GiB RAM - General Purpose'\nconst gp4Cpu16Gib = '4 vCPU, 16 GiB RAM - General Purpose'\nconst gp8Cpu32Gib = '8 vCPU, 32 GiB RAM - General Purpose'\nconst gp16Cpu64Gib = '16 vCPU, 64 GiB RAM - General Purpose'\nconst gp40Cpu160Gib = '40 vCPU, 160 GiB RAM - General Purpose'\nconst gp64Cpu256Gib = '64 vCPU, 256 GiB RAM - General Purpose'\nconst co96Cpu192Gib = '96 vCPU, 192 GiB RAM - Compute Optimized'\nconst mo2Cpu16Gib = '2 vCPU, 16 GiB RAM - Memory Optimized'\nconst mo8Cpu64Gib = '8 vCPU, 64 GiB RAM - Memory Optimized'\nconst mo4Cpu64Gib = '4 vCPU, 32 GiB RAM - Memory Optimized'\nconst mo16Cpu64Gib = '16 vCPU, 128 GiB RAM - Memory Optimized'\nconst mo32Cpu64Gib = '32 vCPU, 256 GiB RAM - Memory Optimized'\nconst mo48Cpu64Gib = '48 vCPU, 384 GiB RAM - Memory Optimized'\nconst mo64Cpu64Gib = '64 vCPU, 512 GiB RAM - Memory Optimized'\nconst mo96Cpu64Gib = '96 vCPU, 768 GiB RAM - Memory Optimized'\n\nexport const awsRegions = {\n    'us-east-1': [usEast1a, usEast1b, usEast1c, usEast1d, usEast1e, usEast1f],\n    'us-east-2': ['us-east-2a', 'us-east-2b', 'us-east-2c'],\n    'us-west-1': ['us-west-1a', 'us-west-1c'],\n    'us-west-2': ['us-west-2a', 'us-west-2b', 'us-west-2c', 'us-west-2d'],\n    'af-south-1': ['af-south-1a', 'af-south-1b', 'af-south-1c'],\n    'ap-east-1': ['ap-east-1a', 'ap-east-1b', 'ap-east-1c'],\n    'ap-northeast-1': ['ap-northeast-1a', 'ap-northeast-1c', 'ap-northeast-1d'],\n    'ap-northeast-2': ['ap-northeast-2a', 'ap-northeast-2b', 'ap-northeast-2c'],\n    'ap-northeast-3': ['ap-northeast-3a'],\n    'ap-south-1': ['ap-south-1a', 'ap-south-1b', 'ap-south-1c'],\n    'ap-southeast-1': ['ap-southeast-1a', 'ap-southeast-1b', 'ap-southeast-1c'],\n    'ap-southeast-2': ['ap-southeast-2a', 'ap-southeast-2b', 'ap-southeast-2c'],\n    'ca-central-1': ['ca-central-1a', 'ca-central-1b', 'ca-central-1d'],\n    'eu-central-1': ['eu-central-1a', 'eu-central-1b', 'eu-central-1c'],\n    'eu-north-1': ['eu-north-1a', 'eu-north-1b', 'eu-north-1c'],\n    'eu-south-1': ['eu-south-1a', 'eu-south-1b', 'eu-south-1c'],\n    'eu-west-1': ['eu-west-1a', 'eu-west-1b', 'eu-west-1c'],\n    'eu-west-2': ['eu-west-2a', 'eu-west-2b', 'eu-west-2c'],\n    'eu-west-3': ['eu-west-3a', 'eu-west-3b', 'eu-west-3c'],\n    'me-south-1': ['me-south-1a', 'me-south-1b', 'me-south-1c'],\n    'sa-east-1': ['sa-east-1a', 'sa-east-1b', 'sa-east-1c'],\n    'us-gov-west-1': ['us-gov-west-1a', 'us-gov-west-1b', 'us-gov-west-1c'],\n    'us-gov-east-1': ['us-gov-east-1a', 'us-gov-east-1b', 'us-gov-east-1c'],\n}\n\nconst AWSmasterInstanceTypes = [\n    { value: 'm5.large', description: gp2Cpu8Gib },\n    { value: 'm5.xlarge', description: gp4Cpu16Gib },\n    { value: 'm5.2xlarge', description: gp8Cpu32Gib },\n    { value: 'm5.4xlarge', description: gp16Cpu64Gib },\n    { value: 'm5.10xlarge', description: gp40Cpu160Gib },\n    { value: 'm5.16xlarge', description: gp64Cpu256Gib },\n]\n\nexport const AWSworkerInstanceTypes = [\n    {\n        label: 'General Purpose',\n        children: [\n            {\n                label: 'Balanced',\n                children: [\n                    {\n                        label: 'M4 - 2.3 GHz Intel processors',\n                        children: [\n                            { value: 'm4.large', description: gp2Cpu8Gib },\n                            { value: 'm4.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm4.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm4.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm4.10xlarge', description: gp40Cpu160Gib },\n                            { value: 'm4.16xlarge', description: gp64Cpu256Gib },\n                        ],\n                    },\n                    {\n                        label: 'M5 - 3.1 GHz Intel processors',\n                        children: [\n                            { value: 'm5.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5.4xlarge', description: '16 vCPU, 64  GiB RAM - General Purpose' },\n                            { value: 'm5.8xlarge', description: '32 vCPU, 128 GiB RAM - General Purpose' },\n                            { value: 'm5.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5.16xlarge', description: gp64Cpu256Gib },\n                            { value: 'm5.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                    {\n                        label: 'M5a - AMD processors, up to 10% cost savings over M5',\n                        children: [\n                            { value: 'm5a.large', description: gp2Cpu8Gib },\n                            { value: 'm5a.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5a.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5a.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm5a.8xlarge', description: '32 vCPU, 128 GiB RAM - General Purpose' },\n                            { value: 'm5a.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5a.16xlarge', description: gp64Cpu256Gib },\n                            { value: 'm5a.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                    {\n                        label: 'M5n - Network optimized',\n                        children: [\n                            { value: 'm5n.large', description: gp2Cpu8Gib },\n                            { value: 'm5n.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5n.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5n.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm5n.8xlarge', description: '32 vCPU, 128 GiB RAM - General Purpose' },\n                            { value: 'm5n.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5n.16xlarge', description: gp64Cpu256Gib },\n                            { value: 'm5n.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: 'Network Optimized',\n                children: [\n                    { value: 'a1.medium', description: '1 vCPU, 2 GiB RAM - Network Optimized' },\n                    { value: 'a1.large', description: '2 vCPU, 4 GiB RAM - Network Optimized' },\n                    { value: 'a1.xlarge', description: '4 vCPU, 8  GiB RAM - Network Optimized' },\n                    { value: 'a1.2xlarge', description: '8 vCPU, 16 GiB RAM - Network Optimized' },\n                    { value: 'a1.4xlarge', description: '16 vCPU, 32 GiB RAM - Network Optimized' },\n                    { value: 'a1.metal', description: '16 vCPU, 32 GiB RAM - Network Optimized' },\n                ],\n            },\n            {\n                label: 'Burstable CPU',\n                children: [\n                    {\n                        label: 'T2 - Lowest-cost',\n                        children: [\n                            { value: 't2.nano', description: '1 vCPU, 0.5 GiB RAM - General Purpose' },\n                            { value: 't2.micro', description: '1 vCPU, 1 GiB RAM - General Purpose' },\n                            { value: 't2.small', description: '1 vCPU, 2 GiB RAM - General Purpose' },\n                            { value: 't2.medium', description: '2 vCPU, 4  GiB RAM - General Purpose' },\n                            { value: 't2.large', description: gp2Cpu8Gib },\n                            { value: 't2.xlarge', description: gp4Cpu16Gib },\n                            { value: 't2.2xlarge', description: gp8Cpu32Gib },\n                        ],\n                    },\n                    {\n                        label: 'T3 - General purpose',\n                        children: [\n                            { value: 't3.nano', description: '2 vCPU, 0.5 GiB RAM - Burstable CPU' },\n                            { value: 't3.micro', description: '2 vCPU, 1 GiB RAM - Burstable CPU' },\n                            { value: 't3.small', description: '2 vCPU, 2  GiB RAM - Burstable CPU' },\n                            { value: 't3.medium', description: '2 vCPU, 4 GiB RAM - Burstable CPU' },\n                            { value: 't3.large', description: '2 vCPU, 8 GiB RAM - Burstable CPU' },\n                            { value: 't3.xlarge', description: '4 vCPU, 16 GiB RAM - Burstable CPU' },\n                            { value: 't3.2xlarge', description: '8 vCPU, 32 GiB RAM - Burstable CPU' },\n                        ],\n                    },\n                    {\n                        label: 'T3a - Up to 10% cost savings over T3',\n                        children: [\n                            { value: 't3a.nano', description: '2 vCPU, 0.5 GiB RAM - General Purpose' },\n                            { value: 't3a.micro', description: '2 vCPU, 1 GiB RAM - General Purpose' },\n                            { value: 't3a.small', description: '2 vCPU, 2 GiB RAM - General Purpose' },\n                            { value: 't3a.medium', description: '2 vCPU, 4 GiB RAM - General Purpose' },\n                            { value: 't3a.large', description: gp2Cpu8Gib },\n                            { value: 't3a.xlarge', description: '4 vCPU, 16  GiB RAM - General Purpose' },\n                            { value: 't3a.2xlarge', description: gp8Cpu32Gib },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: 'With SSD',\n                children: [\n                    {\n                        label: 'M5d - Intel processor with SSDs physically connected to the host server',\n                        children: [\n                            { value: 'm5d.large', description: gp2Cpu8Gib },\n                            { value: 'm5d.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5d.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5d.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm5d.8xlarge', description: '32 vCPU, 128 GiB RAM - General Purpose' },\n                            { value: 'm5d.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5d.16xlarge', description: gp64Cpu256Gib },\n                            { value: 'm5d.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                            { value: 'm5d.metal', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                    {\n                        label: 'M5ad - AMD processor with SSDs physically connected to the host server',\n                        children: [\n                            { value: 'm5ad.large', description: gp2Cpu8Gib },\n                            { value: 'm5ad.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5ad.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5ad.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm5ad.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5ad.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                    {\n                        label: 'M5dn - Network optimized with SSDs physically connected to the host server',\n                        children: [\n                            { value: 'm5dn.large', description: gp2Cpu8Gib },\n                            { value: 'm5dn.xlarge', description: gp4Cpu16Gib },\n                            { value: 'm5dn.2xlarge', description: gp8Cpu32Gib },\n                            { value: 'm5dn.4xlarge', description: gp16Cpu64Gib },\n                            { value: 'm5dn.8xlarge', description: '32 vCPU, 128 GiB RAM - General Purpose' },\n                            { value: 'm5dn.12xlarge', description: '48 vCPU, 192 GiB RAM - General Purpose' },\n                            { value: 'm5dn.16xlarge', description: gp64Cpu256Gib },\n                            { value: 'm5dn.24xlarge', description: '96 vCPU, 384 GiB RAM - General Purpose' },\n                        ],\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        label: 'Compute Optimized',\n        children: [\n            {\n                label: 'C5 - Intel processors, compute optimized',\n                children: [\n                    { value: 'c5.large', description: '2 vCPU, 4 GiB RAM - Compute Optimized' },\n                    { value: 'c5.xlarge', description: '4  vCPU, 8 GiB RAM - Compute Optimized' },\n                    { value: 'c5.2xlarge', description: '8 vCPU, 16  GiB RAM - Compute Optimized' },\n                    { value: 'c5.4xlarge', description: '16 vCPU, 32 GiB RAM - Compute Optimized' },\n                    { value: 'c5.9xlarge', description: '36 vCPU, 72 GiB RAM - Compute Optimized' },\n                    { value: 'c5.12xlarge', description: '48 vCPU, 96  GiB RAM - Compute Optimized' },\n                    { value: 'c5.18xlarge', description: '72 vCPU, 144 GiB RAM - Compute Optimized' },\n                    { value: 'c5.24xlarge', description: co96Cpu192Gib },\n                    { value: 'c5.metal', description: co96Cpu192Gib },\n                ],\n            },\n            {\n                label: 'C5a - AMD processors, compute optimized',\n                children: [\n                    { value: 'c5a.large', description: '2 vCPU, 4  GiB RAM - Compute Optimized' },\n                    { value: 'c5a.xlarge', description: '4 vCPU, 8 GiB RAM - Compute Optimized' },\n                    { value: 'c5a.2xlarge', description: '8 vCPU, 16 GiB RAM - Compute Optimized' },\n                    { value: 'c5a.4xlarge', description: '16 vCPU, 32  GiB RAM - Compute Optimized' },\n                    { value: 'c5a.8xlarge', description: '32 vCPU, 64 GiB RAM - Compute Optimized' },\n                    { value: 'c5a.12xlarge', description: '48 vCPU, 96 GiB RAM - Compute Optimized' },\n                    { value: 'c5a.16xlarge', description: '64 vCPU, 128 GiB RAM - Compute Optimized' },\n                    { value: 'c5a.24xlarge', description: co96Cpu192Gib },\n                ],\n            },\n            {\n                label: 'C5d - Intel processors with SSD',\n                children: [\n                    { value: 'c5d.large', description: '2  vCPU, 4 GiB RAM - Compute Optimized' },\n                    { value: 'c5d.xlarge', description: '4 vCPU, 8 GiB RAM - Compute Optimized' },\n                    { value: 'c5d.2xlarge', description: '8  vCPU, 16  GiB RAM - Compute Optimized' },\n                    { value: 'c5d.4xlarge', description: '16 vCPU, 32  GiB RAM - Compute Optimized' },\n                    { value: 'c5d.9xlarge', description: '36 vCPU, 72  GiB RAM - Compute Optimized' },\n                    { value: 'c5d.12xlarge', description: '48 vCPU, 96 GiB RAM - Compute Optimized' },\n                    { value: 'c5d.18xlarge', description: '72 vCPU, 144 GiB RAM - Compute Optimized' },\n                    { value: 'c5d.24xlarge', description: co96Cpu192Gib },\n                    { value: 'c5d.metal', description: co96Cpu192Gib },\n                ],\n            },\n            {\n                label: 'C5n  - Intel processors, optimized network',\n                children: [\n                    { value: 'c5n.large', description: '2 vCPU, 5.25 GiB RAM - Compute Optimized' },\n                    { value: 'c5n.xlarge', description: '4 vCPU, 10.5 GiB RAM - Compute Optimized' },\n                    { value: 'c5n.2xlarge', description: '8 vCPU, 21 GiB RAM - Compute Optimized' },\n                    { value: 'c5n.4xlarge', description: '16 vCPU, 42  GiB RAM - Compute Optimized' },\n                    { value: 'c5n.9xlarge', description: '36 vCPU, 96 GiB RAM - Compute Optimized' },\n                    { value: 'c5n.18xlarge', description: '72 vCPU, 192 GiB RAM - Compute Optimized' },\n                    { value: 'c5n.metal', description: '72 vCPU, 192 GiB RAM - Compute Optimized' },\n                ],\n            },\n            {\n                label: 'C4  - Intel processors, cost-effective',\n                children: [\n                    { value: 'c4.large', description: '2 vCPU, 3.75GiB RAM - Compute Optimized' },\n                    { value: 'c4.xlarge', description: '4 vCPU, 7.5 GiB RAM - Compute Optimized' },\n                    { value: 'c4.2xlarge', description: '8 vCPU, 15  GiB RAM - Compute Optimized' },\n                    { value: 'c4.4xlarge', description: '16 vCPU, 30 GiB RAM - Compute Optimized' },\n                    { value: 'c4.8xlarge', description: '36 vCPU, 60GiB RAM - Compute Optimized' },\n                ],\n            },\n        ],\n    },\n    {\n        label: 'Memory Optimized',\n        children: [\n            {\n                label: 'General Purpose',\n                children: [\n                    {\n                        label: 'R4 - Optimized for memory-intensive applications',\n                        children: [\n                            { value: 'r4.large', description: '2 vCPU, 15.25 GiB RAM - Memory Optimized' },\n                            { value: 'r4.xlarge', description: '4  vCPU, 30.5 GiB RAM - Memory Optimized' },\n                            { value: 'r4.2xlarge', description: '8 vCPU, 61 GiB RAM - Memory Optimized' },\n                            { value: 'r4.4xlarge', description: '16 vCPU, 122 GiB RAM - Memory Optimized' },\n                            { value: 'r4.8xlarge', description: '32 vCPU, 244 GiB RAM - Memory Optimized' },\n                            { value: 'r4.16xlarge', description: '64 vCPU, 488 GiB RAM - Memory Optimized' },\n                        ],\n                    },\n                    {\n                        label: 'R5 - 5% additional memory per vCPU over R4',\n                        children: [\n                            { value: 'r5.large', description: mo2Cpu16Gib },\n                            { value: 'r5.xlarge', description: '4  vCPU, 32 GiB RAM - Memory Optimized' },\n                            { value: 'r5.2xlarge', description: mo8Cpu64Gib },\n                            { value: 'r5.4xlarge', description: '16 vCPU, 128GiB RAM - Memory Optimized' },\n                            { value: 'r5.8xlarge', description: '32 vCPU, 256GiB RAM - Memory Optimized' },\n                            { value: 'r5.12xlarge', description: '48 vCPU, 384GiB RAM - Memory Optimized' },\n                            { value: 'r5.16xlarge', description: '64 vCPU, 512GiB RAM - Memory Optimized' },\n                            { value: 'r5.24xlarge', description: '96 vCPU, 768GiB RAM - Memory Optimized' },\n                            { value: 'r5.metal', description: '96 vCPU, 768GiB RAM - Memory Optimized' },\n                        ],\n                    },\n                    {\n                        label: 'R5a - AMD processors',\n                        children: [\n                            { value: 'r5a.large', description: '2  vCPU, 16 GiB RAM - Memory Optimized' },\n                            { value: 'r5a.xlarge', description: mo4Cpu64Gib },\n                            { value: 'r5a.2xlarge', description: '8  vCPU, 64 GiB RAM - Memory Optimized' },\n                            { value: 'r5a.4xlarge', description: mo16Cpu64Gib },\n                            { value: 'r5a.8xlarge', description: mo32Cpu64Gib },\n                            { value: 'r5a.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'r5a.16xlarge', description: mo64Cpu64Gib },\n                            { value: 'r5a.24xlarge', description: mo96Cpu64Gib },\n                        ],\n                    },\n                    {\n                        label: 'R5n - Network optimized',\n                        children: [\n                            { value: 'r5n.large', description: mo2Cpu16Gib },\n                            { value: 'r5n.xlarge', description: mo4Cpu64Gib },\n                            { value: 'r5n.2xlarge', description: mo8Cpu64Gib },\n                            { value: 'r5n.4xlarge', description: mo16Cpu64Gib },\n                            { value: 'r5n.8xlarge', description: mo32Cpu64Gib },\n                            { value: 'r5n.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'r5n.16xlarge', description: mo64Cpu64Gib },\n                            { value: 'r5n.24xlarge', description: mo96Cpu64Gib },\n                        ],\n                    },\n                    {\n                        label: 'High Memory - Metal',\n                        children: [\n                            { value: 'u-6tb1.metal', description: '448 vCPU, 6144 GiB RAM - Memory Optimized' },\n                            { value: 'u-9tb1.metal', description: '448 vCPU, 9216 GiB RAM - Memory Optimized' },\n                            { value: 'u-12tb1.metal', description: '448 vCPU, 12288 GiB RAM - Memory Optimized' },\n                            { value: 'u-18tb1.metal', description: '448 vCPU, 18432 GiB RAM - Memory Optimized' },\n                            { value: 'u-24tb1.metal', description: '448 vCPU, 24576 GiB RAM - Memory Optimized' },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: 'With Xeon Processors',\n                children: [\n                    {\n                        label: 'X1 - Xeon processors',\n                        children: [\n                            { value: 'x1.16xlarge', description: '64 vCPU, 976 GiB RAM - Memory Optimized' },\n                            { value: 'x1.32xlarge', description: '128 vCPU, 1,952 GiB RAM - Memory Optimized' },\n                        ],\n                    },\n                    {\n                        label: 'X1e - Xeon processors, in-memory database optimized',\n                        children: [\n                            { value: 'x1e.xlarge', description: '4 vCPU, 122 GiB RAM - Memory Optimized' },\n                            { value: 'x1e.2xlarge', description: '8 vCPU, 244 GiB RAM - Memory Optimized' },\n                            { value: 'x1e.4xlarge', description: '16 vCPU, 488 GiB RAM - Memory Optimized' },\n                            { value: 'x1e.8xlarge', description: '32 vCPU, 976 GiB RAM - Memory Optimized' },\n                            { value: 'x1e.16xlarge', description: '64 vCPU, 1,952 GiB RAM - Memory Optimized' },\n                            { value: 'x1e.32xlarge', description: '128 vCPU, 3,904 GiB RAM - Memory Optimized' },\n                        ],\n                    },\n                ],\n            },\n            {\n                label: 'With SSD',\n                children: [\n                    {\n                        label: 'R5d - With SSD',\n                        children: [\n                            { value: 'r5d.large', description: '2  vCPU, 16  GiB RAM - Memory Optimized' },\n                            { value: 'r5d.xlarge', description: '4 vCPU, 32  GiB RAM - Memory Optimized' },\n                            { value: 'r5d.2xlarge', description: '8  vCPU, 64  GiB RAM - Memory Optimized' },\n                            { value: 'r5d.4xlarge', description: mo16Cpu64Gib },\n                            { value: 'r5d.8xlarge', description: mo32Cpu64Gib },\n                            { value: 'r5d.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'r5d.16xlarge', description: mo64Cpu64Gib },\n                            { value: 'r5d.24xlarge', description: mo96Cpu64Gib },\n                            { value: 'r5d.metal', description: mo96Cpu64Gib },\n                        ],\n                    },\n                    {\n                        label: 'R5dn - With SSD, network optimized',\n                        children: [\n                            { value: 'r5dn.large', description: mo2Cpu16Gib },\n                            { value: 'r5dn.xlarge', description: '4  vCPU, 32 GiB RAM - Memory Optimized' },\n                            { value: 'r5dn.2xlarge', description: mo8Cpu64Gib },\n                            { value: 'r5dn.4xlarge', description: mo16Cpu64Gib },\n                            { value: 'r5dn.8xlarge', description: mo32Cpu64Gib },\n                            { value: 'r5dn.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'r5dn.16xlarge', description: mo64Cpu64Gib },\n                            { value: 'r5dn.24xlarge', description: mo96Cpu64Gib },\n                        ],\n                    },\n                    {\n                        label: 'R5ad - With SSD, AMD processors',\n                        children: [\n                            { value: 'r5ad.large', description: '2 vCPU, 16  GiB RAM - Memory Optimized' },\n                            { value: 'r5ad.xlarge', description: '4  vCPU, 32  GiB RAM - Memory Optimized' },\n                            { value: 'r5ad.2xlarge', description: '8 vCPU, 64  GiB RAM - Memory Optimized' },\n                            { value: 'r5ad.4xlarge', description: mo16Cpu64Gib },\n                            { value: 'r5ad.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'r5ad.24xlarge', description: mo96Cpu64Gib },\n                        ],\n                    },\n                    {\n                        label: 'Z1d - With SSD, fastest processor',\n                        children: [\n                            { value: 'z1d.large', description: '2  vCPU, 16 GiB RAM - Memory Optimized' },\n                            { value: 'z1d.xlarge', description: mo4Cpu64Gib },\n                            { value: 'z1d.2xlarge', description: '8  vCPU, 64 GiB RAM - Memory Optimized' },\n                            { value: 'z1d.3xlarge', description: '12 vCPU, 96 GiB RAM - Memory Optimized' },\n                            { value: 'z1d.6xlarge', description: '24 vCPU, 192 GiB RAM - Memory Optimized' },\n                            { value: 'z1d.12xlarge', description: mo48Cpu64Gib },\n                            { value: 'z1d.metal', description: mo48Cpu64Gib },\n                        ],\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        label: 'Accelerated Computing',\n        children: [\n            {\n                label: 'P3 - NVIDIA Tesla V100 GPUs',\n                children: [\n                    { value: 'p3.2xlarge', description: '1 GPUs, 8 vCPU, 61 GiB, 16 GPU GiB- Accelerated Computing' },\n                    { value: 'p3.8xlarge', description: '4 GPUs, 32 vCPU, 244 GiB, 64 GPU GiB- Accelerated Computing' },\n                    {\n                        value: 'p3.16xlarge',\n                        description: '8 GPUs, 64 vCPU, 488 GiB, 128 GPU GiB- Accelerated Computing',\n                    },\n                    {\n                        value: 'p3dn.24xlarge',\n                        description: '8 GPUs, 96 vCPU, 768 GiB, 256 GPU GiB- Accelerated Computing',\n                    },\n                ],\n            },\n            {\n                label: 'P2 - NVIDIA K80 GPUs',\n                children: [\n                    { value: 'p2.xlarge', description: '1  GPUs, 4 vCPU, 61 GiB, 12 GPU GiB- Accelerated Computing' },\n                    { value: 'p2.8xlarge', description: '8 GPUs, 32 vCPU, 488 GiB, 96 GPU GiB- Accelerated Computing' },\n                    {\n                        value: 'p2.16xlarge',\n                        description: '16 GPUs, 64 vCPU, 732 GiB, 192 GPU GiB- Accelerated Computing',\n                    },\n                ],\n            },\n            {\n                label: 'G4 - NVIDIA T4 Tensor Core GPUs',\n                children: [\n                    { value: 'g4dn.xlarge', description: '1 GPUs, 4 vCPU, 16 GiB, 16 GPU GiB- Accelerated Computing' },\n                    { value: 'g4dn.2xlarge', description: '1 GPUs, 8 vCPU, 32 GiB, 16 GPU GiB- Accelerated Computing' },\n                    {\n                        value: 'g4dn.4xlarge',\n                        description: '1 GPUs, 16 vCPU, 64 GiB, 16 GPU GiB- Accelerated Computing',\n                    },\n                    {\n                        value: 'g4dn.8xlarge',\n                        description: '1 GPUs, 32 vCPU, 128 GiB, 16 GPU GiB- Accelerated Computing',\n                    },\n                    {\n                        value: 'g4dn.16xlarge',\n                        description: '1 GPUs, 64 vCPU, 256 GiB, 16 GPU GiB- Accelerated Computing',\n                    },\n                    {\n                        value: 'g4dn.12xlarge',\n                        description: '4 GPUs, 48 vCPU, 192 GiB, 64 GPU GiB- Accelerated Computing',\n                    },\n                    {\n                        value: 'g4dn.metal',\n                        description: '8 GPUs, 96 vCPU, 384 GiB, 128 GPU GiB- Accelerated Computing',\n                    },\n                ],\n            },\n            {\n                label: 'G3 - NVIDIA Tesla M60 GPUs',\n                children: [\n                    { value: 'g3s.xlarge', description: '1 GPUs, 4 vCPU, 30.5 GiB, 8 GPU GiB- Accelerated Computing' },\n                    { value: 'g3.4xlarge', description: '1 GPUs, 16 vCPU, 122 GiB, 8 GPU GiB- Accelerated Computing' },\n                    { value: 'g3.8xlarge', description: '2 GPUs, 32 vCPU, 244 GiB, 16 GPU GiB- Accelerated Computing' },\n                    {\n                        value: 'g3.16xlarge',\n                        description: '4 GPUs, 64 vCPU, 488 GiB, 32 GPU GiB- Accelerated Computing',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        label: 'Storage Optimized',\n        children: [\n            {\n                label: 'I3 - High Frequency Intel Xeon Processors',\n                children: [\n                    { value: 'i3.large', description: '2 vCPU, 15.25 GiB RAM - Storage Optimized' },\n                    { value: 'i3.xlarge', description: '4  vCPU, 30.5 GiB RAM - Storage Optimized' },\n                    { value: 'i3.2xlarge', description: '8 vCPU, 61  GiB RAM - Storage Optimized' },\n                    { value: 'i3.4xlarge', description: '16 vCPU, 122 GiB RAM - Storage Optimized' },\n                    { value: 'i3.8xlarge', description: '32 vCPU, 244 GiB RAM - Storage Optimized' },\n                    { value: 'i3.16xlarge', description: '64 vCPU, 488 GiB RAM - Storage Optimized' },\n                    { value: 'i3.metal', description: '72 vCPU, 512GiB RAM - Storage Optimized' },\n                ],\n            },\n            {\n                label: 'I3en - Non-Volatile Memory Express SSD instance storage',\n                children: [\n                    { value: 'i3en.large', description: '2 vCPU, 16  GiB RAM - Storage Optimized' },\n                    { value: 'i3en.xlarge', description: '4  vCPU, 32  GiB RAM - Storage Optimized' },\n                    { value: 'i3en.2xlarge', description: '8 vCPU, 64  GiB RAM - Storage Optimized' },\n                    { value: 'i3en.3xlarge', description: '12 vCPU, 96 GiB RAM - Storage Optimized' },\n                    { value: 'i3en.6xlarge', description: '24 vCPU, 192 GiB RAM - Storage Optimized' },\n                    { value: 'i3en.12xlarge', description: '48 vCPU, 384 GiB RAM - Storage Optimized' },\n                    { value: 'i3en.24xlarge', description: '96 vCPU, 768 GiB RAM - Storage Optimized' },\n                    { value: 'i3en.metal', description: '96 vCPU, 768 GiB RAM - Storage Optimized' },\n                ],\n            },\n            {\n                label: 'D2 - Up to 48 TB of HDD-based local storage',\n                children: [\n                    { value: 'd2.xlarge', description: '4 vCPU, 30.5 GiB RAM - Storage Optimized' },\n                    { value: 'd2.2xlarge', description: '8 vCPU, 61 GiB RAM - Storage Optimized' },\n                    { value: 'd2.4xlarge', description: '16 vCPU, 122 GiB RAM - Storage Optimized' },\n                    { value: 'd2.8xlarge', description: '36 vCPU, 244 GiB RAM - Storage Optimized' },\n                ],\n            },\n            {\n                label: 'H1 - 16 TB of HDD-based local storage',\n                children: [\n                    { value: 'h1.2xlarge', description: '8 vCPU, 32  GiB RAM - Storage Optimized' },\n                    { value: 'h1.4xlarge', description: '16 vCPU, 64 GiB RAM - Storage Optimized' },\n                    { value: 'h1.8xlarge', description: '32 vCPU, 128 GiB RAM - Storage Optimized' },\n                    { value: 'h1.16xlarge', description: '64 vCPU, 256 GiB RAM - Storage Optimized' },\n                ],\n            },\n        ],\n    },\n]\n","import { Breadcrumb, BreadcrumbItem, ClipboardCopyButton, CodeBlock, CodeBlockAction, Page, PageSection } from '@patternfly/react-core'\nimport { useState } from 'react'\nimport YAML from 'yaml'\nimport { RouteE } from '../Routes'\n\nexport function ResultYaml() {\n    const [copied, setCopied] = useState(false)\n    const results = sessionStorage.getItem('results') ?? ''\n    let data: any\n    try {\n        data = JSON.parse(results)\n    } catch {\n        data = { message: 'No results' }\n    }\n    return (\n        <Page\n            breadcrumb={\n                <Breadcrumb>\n                    <BreadcrumbItem to={RouteE.Home}>Home</BreadcrumbItem>\n                    <BreadcrumbItem>Results</BreadcrumbItem>\n                </Breadcrumb>\n            }\n            isBreadcrumbGrouped\n            groupProps={{ sticky: 'top' }}\n        >\n            <PageSection padding={{ default: 'noPadding' }}>\n                <CodeBlock\n                    actions={\n                        <CodeBlockAction>\n                            <ClipboardCopyButton\n                                id=\"copy-button\"\n                                textId=\"code-content\"\n                                aria-label=\"Copy to clipboard\"\n                                onClick={() => {\n                                    setCopied(true)\n                                    void navigator.clipboard.writeText(YAML.stringify(data))\n                                    setTimeout(() => {\n                                        setCopied(false)\n                                    }, 1000)\n                                }}\n                                exitDelay={600}\n                                maxWidth=\"110px\"\n                                variant=\"plain\"\n                            >\n                                {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\n                            </ClipboardCopyButton>\n                        </CodeBlockAction>\n                    }\n                >\n                    <pre>{YAML.stringify(data)}</pre>\n                </CodeBlock>\n            </PageSection>\n        </Page>\n    )\n}\n","import { AmazonIcon, AzureIcon, GoogleIcon, OpenstackIcon } from '@patternfly/react-icons'\nimport {\n    FormWizardPage,\n    FormWizardSection,\n    FormWizardSelect,\n    FormWizardStep,\n    FormWizardTextInput,\n    FormWizardTile,\n    FormWizardTiles,\n} from '../../src'\n// import YamlTemplate from './Credentials.hbs'\n\nexport function CredentialsForm() {\n    return (\n        <FormWizardPage\n            title=\"Add credentials\"\n            breadcrumb={[{ label: 'Home', to: '.' }, { label: 'Automation' }]}\n            defaultData={{\n                apiVersion: 'v1',\n                kind: 'Secret',\n                type: 'Opaque',\n                metadata: {\n                    name: '',\n                    namespace: '',\n                    labels: {\n                        'cluster.open-cluster-management.io/type': '',\n                    },\n                },\n            }}\n        >\n            <FormWizardStep label=\"Credential type\">\n                <FormWizardTiles\n                    id=\"cloudCredentials\"\n                    path=\"metadata.labels.cluster\\.open-cluster-management\\.io/credentials\"\n                    label=\"Cloud provider credentials\"\n                >\n                    <FormWizardTile id=\"aws\" icon={<AmazonIcon />} value=\"AWS\" label=\"Amazon Web Services\" />\n                    <FormWizardTile id=\"azr\" icon={<AzureIcon />} value=\"azr\" label=\"Microsoft Azure\" />\n                    <FormWizardTile id=\"gcp\" icon={<GoogleIcon />} value=\"gcp\" label=\"Google Cloud Platform\" />\n                </FormWizardTiles>\n                <FormWizardTiles\n                    id=\"datacenterCredentials\"\n                    path=\"metadata.labels.cluster\\.open-cluster-management\\.io/credentials\"\n                    label=\"Datacenter credentials\"\n                >\n                    <FormWizardTile id=\"ost\" icon={<OpenstackIcon />} value=\"ost\" label=\"Red Hat OpenStack Platform\" />\n                    <FormWizardTile id=\"vsp\" value=\"vsp\" label=\"VMWare vSphere\" />\n                    <FormWizardTile id=\"bare\" value=\"bare\" label=\"Bare metal\" />\n                </FormWizardTiles>\n                <FormWizardTiles\n                    id=\"automationCredentials\"\n                    path=\"metadata.labels.cluster\\.open-cluster-management\\.io/credentials\"\n                    label=\"Automation & other credentials\"\n                >\n                    <FormWizardTile id=\"auto\" value=\"auto\" label=\"Automation & other credentials\" />\n                    <FormWizardTile id=\"ocm\" value=\"ocm\" label=\"Red Hat OpenShoft Cluster Manager\" />\n                </FormWizardTiles>\n                <FormWizardTiles\n                    id=\"centrallyManagedCredentials\"\n                    path=\"metadata.labels.cluster\\.open-cluster-management\\.io/credentials\"\n                    label=\"Centrally managed\"\n                >\n                    <FormWizardTile id=\"onp\" value=\"onp\" label=\"On premise\" />\n                </FormWizardTiles>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Basic Information\">\n                <FormWizardSection label=\"Details\" prompt=\"Enter the credentials details\">\n                    <FormWizardTextInput id=\"metadata.name\" label=\"Name\" required />\n                    <FormWizardSelect\n                        id=\"metadata.namespace\"\n                        label=\"Namespace\"\n                        helperText=\"The namespace on the hub cluster where the resources will be created.\"\n                        options={['default']}\n                        required\n                    />\n                    <FormWizardTextInput id=\"stringData.baseDomain\" label=\"Base DNS domain\" placeholder=\"Enter the Base DNS domain\" />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Amazon Web Services\" hidden={(item) => item.credentialsType !== 'AWS'}>\n                <FormWizardSection label=\"Amazon Web Services\" prompt=\"Enter the Amazon Web Services credentials\">\n                    <FormWizardTextInput id=\"stringData.accessKeyID\" label=\"Access key ID\" required />\n                    <FormWizardTextInput id=\"stringData.secretAccessKey\" label=\"Secret access key\" required secret />\n                </FormWizardSection>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Pull secret and SSH\">\n                <FormWizardSection label=\"Pull secret and SSH\" prompt=\"Enter the pull secret and SSH keys\">\n                    <FormWizardTextInput id=\"stringData.pullSecret\" label=\"Pull secret\" required secret />\n                    <FormWizardTextInput\n                        id=\"stringData.sshPrivateKey\"\n                        label=\"SSH private key\"\n                        placeholder=\"Enter the SSH private key\"\n                        required\n                        secret\n                    />\n                    <FormWizardTextInput\n                        id=\"stringData.sshPublicKey\"\n                        label=\"SSH public key\"\n                        placeholder=\"Enter the SSH public key\"\n                        required\n                        secret\n                    />\n                </FormWizardSection>\n            </FormWizardStep>\n        </FormWizardPage>\n    )\n}\n","import {\n    FormWizardArrayInput,\n    FormWizardCheckbox as Checkbox,\n    FormWizardKeyValue,\n    FormWizardLabels as Labels,\n    FormWizardPage as Wizard,\n    FormWizardRadio as Radio,\n    FormWizardRadioGroup as RadioGroup,\n    FormWizardSection as Section,\n    FormWizardSelect as Select,\n    FormWizardStep as Step,\n    FormWizardTextInput as TextInput,\n    FormWizardTile as Tile,\n    FormWizardTiles as Tiles,\n} from '../../src'\n\nexport function InputsWizard() {\n    return (\n        <Wizard\n            title=\"Inputs wizard\"\n            description=\"Example wizard showing inputs examples\"\n            breadcrumb={[{ label: 'Home', to: '.' }, { label: 'Inputs' }]}\n        >\n            <Step label=\"Text Input\">\n                <Section label=\"Text input examples\">\n                    <TextInput id=\"text-input\" label=\"Text input\" required />\n                </Section>\n            </Step>\n\n            <Step label=\"Select\">\n                <Section label=\"Select input examples\">\n                    <Select id=\"select\" label=\"Select\" options={['Option 1', 'Option 2']} />\n                    <Select id=\"select\" label=\"Select\" options={['Option 1', 'Option 2']} required />\n                </Section>\n            </Step>\n\n            <Step label=\"Tiles\">\n                <Section label=\"Tile input examples\">\n                    <Tiles id=\"tiles\" path=\"tile\" label=\"Tiles\" required>\n                        <Tile id=\"tile1\" value=\"tile1\" label=\"Tile 1\" />\n                        <Tile id=\"tile2\" value=\"tile2\" label=\"Tile 2\" />\n                        <Tile id=\"tile3\" value=\"tile3\" label=\"Tile 3\" />\n                    </Tiles>\n                </Section>\n            </Step>\n\n            <Step label=\"Radio\">\n                <Section label=\"Radio input examples\">\n                    <RadioGroup id=\"radio\" path=\"radio\" label=\"Radio\" required>\n                        <Radio id=\"radio-1\" label=\"Radio 1\" value=\"radio-1\" description=\"Radio 1 description\" />\n                        <Radio id=\"radio-2\" label=\"Radio 2\" value=\"radio-2\" description=\"Radio 2 description\" />\n                    </RadioGroup>\n                </Section>\n            </Step>\n\n            <Step label=\"Checkbox\">\n                <Section label=\"Checkbox input examples\">\n                    <Checkbox id=\"checkbox\" label=\"Checkbox\" helperText=\"Checkbox helper text.\" />\n                    <Checkbox id=\"checkbox-2\" label=\"Checkbox\" helperText=\"Checkbox helper text.\" />\n                </Section>\n            </Step>\n\n            <Step label=\"Labels\">\n                <Section label=\"Label input example\">\n                    <Labels id=\"labels\" label=\"Labels\" />\n                </Section>\n            </Step>\n\n            <Step label=\"Key-value pairs\">\n                <Section label=\"Key value input example\">\n                    <FormWizardKeyValue id=\"key-values\" label=\"Key vaue pairs\" placeholder=\"Add key value pair\" />\n                </Section>\n            </Step>\n\n            <Step label=\"Array\">\n                <Section label=\"Array input example\">\n                    <FormWizardArrayInput id=\"resources\" label=\"Resources\" path=\"resources\" placeholder=\"Add resource\" collapsedText=\"TODO\">\n                        <TextInput id=\"metadata.name\" label=\"Name\" required />\n                        <Select id=\"metadata.namespace\" label=\"Namespace\" required options={['namespace-1', 'namespace-2']} />\n                        <Labels id=\"metadata.labels\" label=\"Labels\" />\n                    </FormWizardArrayInput>\n                </Section>\n            </Step>\n        </Wizard>\n    )\n}\n","import YAML from 'yaml'\nimport specCertmgmtexp from './spec-certmgmtexp.yaml'\nimport specClusteradminrole from './spec-clusteradminrole.yaml'\nimport specCompOperator from './spec-comp-operator.yaml'\nimport specContainerMemLimit from './spec-container-mem-limit.yaml'\nimport specEtcdEncryption from './spec-etcd-encryption.yaml'\nimport specGatekeeper from './spec-gatekeeper.yaml'\nimport specImagemanifestvuln from './spec-imagemanifestvuln.yaml'\nimport specNamespace from './spec-namespace.yaml'\nimport specPodExists from './spec-pod-exists.yaml'\nimport specPodSecurity from './spec-pod-security.yaml'\nimport specRolebinding from './spec-rolebinding.yaml'\nimport specRoles from './spec-roles.yaml'\nimport specScc from './spec-scc.yaml'\n\nexport const Specifications: {\n    name: string\n    description: string\n    replacements: {\n        standards: string\n        categories: string\n        controls: string\n        policyTemplates: object[]\n    }\n}[] = [\n    specCertmgmtexp,\n    specClusteradminrole,\n    specCompOperator,\n    specContainerMemLimit,\n    specEtcdEncryption,\n    specGatekeeper,\n    specImagemanifestvuln,\n    specNamespace,\n    specPodExists,\n    specPodSecurity,\n    specRolebinding,\n    specRoles,\n    specScc,\n].map((specification) => YAML.parse(specification))\n\n// TODO: strongly type the template values in a generic template type\n// TODO: convert the template values in each template to arrays (from strings)\n","import { Button } from '@patternfly/react-core'\nimport get from 'get-value'\nimport { Fragment, useContext, useMemo } from 'react'\nimport set from 'set-value'\nimport {\n    FormWizardArrayInput,\n    FormWizardCheckbox,\n    FormWizardHidden,\n    FormWizardLabels,\n    FormWizardPage,\n    FormWizardRadio,\n    FormWizardRadioGroup,\n    FormWizardSection,\n    FormWizardSelect,\n    FormWizardSelector,\n    FormWizardStep,\n    FormWizardStringArray,\n    FormWizardTextDetail,\n    FormWizardTextInput,\n} from '../../src'\nimport { FormWizardItemContext } from '../../src/contexts/FormWizardItemContext'\nimport { Specifications } from './templates'\n\nexport function PolicyWizard() {\n    const namespaces = useMemo(() => ['default', 'namespace-1', 'namespace-2'], [])\n    // const clusterSelectors = useMemo(\n    //     () =>\n    //         ['cloud: \"Amazon\"', 'namespace-1', 'namespace-2'].map((selector) => ({\n    //             id: selector,\n    //             label: selector,\n    //             value: selector,\n    //         })),\n    //     []\n    // )\n    // const specifications = useMemo(\n    //     () => Specifications.map((specification) => ({ id: specification.name, label: specification.description, value: specification })),\n    //     []\n    // )\n    // const standards = useMemo(\n    //     () =>\n    //         ['NIST', 'NIST-CSF', 'PCI', 'FISMA', 'HIPAA', 'NIST SP 800-53'].map((standard) => ({\n    //             label: standard,\n    //         })),\n    //     []\n    // )\n    // const categories = useMemo(\n    //     () =>\n    //         [\n    //             'PR.PT Protective Technology',\n    //             'PR.DS Data Security',\n    //             'PR.IP Information Protection Processes and Procedures',\n    //             'PR.AC Identity Management and Access Control',\n    //             'DE.CM Security Continuous Monitoring',\n    //             'AC Access Control',\n    //         ].map((category) => ({ label: category })),\n    //     []\n    // )\n    // const controls = useMemo(\n    //     () =>\n    //         [\n    //             'PR.PT-1 Audit Logging',\n    //             'PR.PT-3 Least Functionality',\n    //             'PR.DS-1 Data-at-rest',\n    //             'PR.DS-2 Data-in-transit',\n    //             'PR.AC-4 Access Control',\n    //             'PR.AC-5 Network Integrity',\n    //             'PR.IP-1 Baseline Configuration',\n    //             'DE.CM-7 Monitoring for Unauthorized Activity',\n    //             'DE.CM-8 Vulnerability Scans',\n    //             'AC-3 Access Enforcement',\n    //         ].map((control) => ({ label: control })),\n    //     []\n    // )\n\n    return (\n        <FormWizardPage\n            title=\"Create policy\"\n            description=\"A policy generates reports and validates cluster compliance based on specified security standards, categories, and controls.\"\n            breadcrumb={[{ label: 'Home', to: '.' }, { label: 'Governance' }]}\n            defaultData={[\n                {\n                    apiVersion: 'policy.open-cluster-management.io/v1',\n                    kind: 'Policy',\n                    metadata: { name: '', namespace: '' },\n                    spec: { remediationAction: 'inform' },\n                },\n                {\n                    apiVersion: 'policy.open-cluster-management.io/v1',\n                    kind: 'PlacementRule',\n                    metadata: {},\n                    spec: {\n                        clusterConditions: { status: 'True', type: 'ManagedClusterConditionAvailable' },\n                        clusterSelector: {\n                            matchExpressions: [],\n                        },\n                    },\n                },\n                {\n                    apiVersion: 'policy.open-cluster-management.io/v1',\n                    kind: 'PlacementBinding',\n                    metadata: {},\n                    placementRef: { apiGroup: 'apps.open-cluster-management.io', kind: 'PlacementRule' },\n                    subjects: [{ apiGroup: 'policy.open-cluster-management.io', kind: 'Policy' }],\n                },\n            ]}\n            // sync={{\n            //     source: { key: 'kind', value: 'Policy', path: 'metadata.namespace' },\n            //     targets: [\n            //         { key: 'kind', value: 'PlacementBinding', path: 'metadata.namespace' },\n            //         { key: 'kind', value: 'PlacementRule', path: 'metadata.namespace' },\n            //     ],\n            // }}\n        >\n            <FormWizardStep label=\"Details\">\n                <FormWizardSelector selectKey=\"kind\" selectValue=\"Policy\">\n                    <FormWizardSection label=\"Details\">\n                        <FormWizardTextInput id=\"metadata.name\" label=\"Name\" placeholder=\"Enter name\" required />\n                        <FormWizardSelect\n                            id=\"metadata.namespace\"\n                            label=\"Namespace\"\n                            placeholder=\"Select namespace\"\n                            helperText=\"The namespace on the hub cluster where the policy resources will be created.\"\n                            options={namespaces}\n                            required\n                            footer={\n                                <Button variant=\"link\" isInline>\n                                    Create new namespace\n                                </Button>\n                            }\n                        />\n                        <FormWizardRadioGroup id=\"spec.remediationAction\" path=\"spec.remediationAction\" label=\"Remediation\" required>\n                            <FormWizardRadio\n                                id=\"inform\"\n                                label=\"Inform\"\n                                value=\"inform\"\n                                description=\"Reports the violation, which requires manual remediation.\"\n                            />\n                            <FormWizardRadio\n                                id=\"enforce\"\n                                label=\"Enforce\"\n                                value=\"enforce\"\n                                description=\"Automatically runs remediation action that is defined in the source, if this feature is supported.\"\n                            />\n                        </FormWizardRadioGroup>\n                        <FormWizardCheckbox\n                            id=\"spec.disabled\"\n                            label=\"Disable policy\"\n                            helperText=\"Select to disable the policy from being propagated to the managed cluster.\"\n                        />\n                    </FormWizardSection>\n                </FormWizardSelector>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Specification\">\n                <FormWizardSelector selectKey=\"kind\" selectValue=\"Policy\">\n                    <PolicyWizardSpecification />\n                </FormWizardSelector>\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Placement\">\n                <PolicyWizardPlacement />\n            </FormWizardStep>\n\n            <FormWizardStep label=\"Security groups\">\n                <FormWizardSelector selectKey=\"kind\" selectValue=\"Policy\">\n                    <FormWizardStringArray\n                        id=\"categories\"\n                        path={`metadata.annotations.policy\\\\.open-cluster-management\\\\.io/categories`}\n                        label=\"Categories\"\n                        placeholder=\"Add category\"\n                        map={(value: string | undefined) => {\n                            return value !== undefined ? value.split(',').map((v) => v.trim()) : []\n                        }}\n                        unmap={(values: string[]) => values.join(', ')}\n                    />\n                    <FormWizardStringArray\n                        id=\"standards\"\n                        path={`metadata.annotations.policy\\\\.open-cluster-management\\\\.io/standards`}\n                        label=\"Standards\"\n                        placeholder=\"Add standard\"\n                        map={(value: string | undefined) => {\n                            return value !== undefined ? value.split(',').map((v) => v.trim()) : []\n                        }}\n                        unmap={(values: string[]) => values.join(', ')}\n                    />\n                    <FormWizardStringArray\n                        id=\"controls\"\n                        path={`metadata.annotations.policy\\\\.open-cluster-management\\\\.io/controls`}\n                        label=\"Controls\"\n                        placeholder=\"Add control\"\n                        map={(value: string | undefined) => {\n                            return value !== undefined ? value.split(',').map((v) => v.trim()) : []\n                        }}\n                        unmap={(values: string[]) => values.join(', ')}\n                    />\n                </FormWizardSelector>\n            </FormWizardStep>\n            {/* <FormWizardStep label=\"Standards\"></FormWizardStep>\n            <FormWizardStep label=\"Controls\"></FormWizardStep> */}\n        </FormWizardPage>\n    )\n}\n\nexport function PolicyWizardSpecification() {\n    const policy = useContext(FormWizardItemContext)\n    return (\n        <FormWizardSection\n            label=\"Specification\"\n            description=\"A policy contains multiple templates that create policy resources on managed clusters.\"\n        >\n            <FormWizardArrayInput\n                id=\"spec.policy-templates\"\n                placeholder=\"Add policy template\"\n                dropdownItems={Specifications.map((specification) => {\n                    return {\n                        label: specification.description,\n                        action: () => {\n                            for (const group of ['categories', 'standards', 'controls']) {\n                                const existingValue: string = get(\n                                    policy,\n                                    `metadata.annotations.policy\\\\.open-cluster-management\\\\.io/${group}`,\n                                    ''\n                                )\n                                const addValue: string = get(specification, `replacements.${group}`, '')\n                                const newValue: string = existingValue\n                                    .split(',')\n                                    .concat(addValue.split(','))\n                                    .map((v) => v.trim())\n                                    .filter((value, index, array) => array.indexOf(value) === index)\n                                    .filter((value) => value)\n                                    .join(', ')\n                                set(policy, `metadata.annotations.policy\\\\.open-cluster-management\\\\.io/${group}`, newValue, {\n                                    preservePaths: false,\n                                })\n                            }\n\n                            return specification.replacements.policyTemplates\n                        },\n                    }\n                })}\n                collapsedText={\n                    <Fragment>\n                        <FormWizardTextDetail id=\"objectDefinition.kind\" /> -{' '}\n                        <FormWizardTextDetail id=\"objectDefinition.spec.object-templates.0.objectDefinition.kind\" /> -{' '}\n                        <FormWizardTextDetail id=\"objectDefinition.metadata.name\" />\n                    </Fragment>\n                }\n            >\n                <FormWizardTextDetail id=\"objectDefinition.kind\" />\n                <FormWizardTextInput id=\"objectDefinition.metadata.name\" label=\"Name\" required />\n                <FormWizardSelect\n                    id=\"objectDefinition.spec.severity\"\n                    label=\"Severity\"\n                    placeholder=\"Select severity\"\n                    options={['low', 'medium', 'high']}\n                    required\n                />\n                <FormWizardSection\n                    label=\"Namespace selector\"\n                    hidden={(template: any) => template?.objectDefinition?.spec?.namespaceSelector === undefined}\n                >\n                    <FormWizardLabels id=\"objectDefinition.spec.namespaceSelector.include\" label=\"Include namespaces\" />\n                    <FormWizardLabels id=\"objectDefinition.spec.namespaceSelector.exclude\" label=\"Exclude namespaces\" />\n                </FormWizardSection>\n                <FormWizardHidden\n                    hidden={(template: any) =>\n                        template?.objectDefinition?.spec?.['object-templates']?.[0]?.objectDefinition?.kind !== 'LimitRange'\n                    }\n                >\n                    <FormWizardSection label=\"Object templates\">\n                        <FormWizardArrayInput\n                            id=\"objectDefinition.spec.object-templates\"\n                            placeholder=\"Add resource template\"\n                            collapsedText={\n                                <Fragment>\n                                    <FormWizardTextDetail id=\"objectDefinition.kind\" /> -{' '}\n                                    <FormWizardTextDetail id=\"objectDefinition.metadata.name\" />\n                                </Fragment>\n                            }\n                        >\n                            <FormWizardTextDetail id=\"objectDefinition.kind\" />\n                            <FormWizardTextInput id=\"objectDefinition.metadata.name\" label=\"Name\" required />\n                            <FormWizardArrayInput\n                                id=\"objectDefinition.spec.limits\"\n                                label=\"Limits\"\n                                placeholder=\"Add limit\"\n                                collapsedText={\n                                    <Fragment>\n                                        <FormWizardTextDetail id=\"objectDefinition.kind\" /> -{' '}\n                                        <FormWizardTextDetail id=\"objectDefinition.metadata.name\" />\n                                    </Fragment>\n                                }\n                            >\n                                <FormWizardTextInput\n                                    id=\"default.memory\"\n                                    label=\"Memory limit\"\n                                    placeholder=\"Enter memory limit\"\n                                    required\n                                    helperText=\"Examples: 512Mi, 2Gi\"\n                                />\n                                <FormWizardTextInput\n                                    id=\"defaultRequest.memory\"\n                                    label=\"Memory request\"\n                                    placeholder=\"Enter memory request\"\n                                    required\n                                    helperText=\"Examples: 512Mi, 2Gi\"\n                                />\n                            </FormWizardArrayInput>\n                        </FormWizardArrayInput>\n                    </FormWizardSection>\n                </FormWizardHidden>\n            </FormWizardArrayInput>\n        </FormWizardSection>\n    )\n}\n\nexport function PolicyWizardPlacement() {\n    return (\n        <Fragment>\n            <FormWizardSection\n                label=\"Placement bindings\"\n                description=\"Policies are applied to clusters using placement bindings. Placement bindings bind policies to a placement rule.\"\n            >\n                <FormWizardArrayInput\n                    id=\"placementBindings\"\n                    path={null}\n                    filter={(resource) => resource.kind === 'PlacementBinding'}\n                    placeholder=\"Add placement binding\"\n                    collapsedText=\"metadata.name\"\n                    newValue={{\n                        apiVersion: 'policy.open-cluster-management.io/v1',\n                        kind: 'PlacementBinding',\n                        metadata: {},\n                        placementRef: { apiGroup: 'apps.open-cluster-management.io', kind: 'PlacementRule' },\n                        subjects: [{ apiGroup: 'policy.open-cluster-management.io', kind: 'Policy' }],\n                    }}\n                >\n                    <FormWizardTextInput id=\"metadata.name\" label=\"Placement binding name\" required />\n                    <FormWizardTextInput id=\"placementRef.name\" label=\"Placement rule name\" required />\n                    <FormWizardArrayInput\n                        id=\"sss\"\n                        path=\"subjects\"\n                        label=\"Placement subjects\"\n                        placeholder=\"Add placement subject\"\n                        collapsedText=\"name\"\n                        newValue={{\n                            apiGroup: 'policy.open-cluster-management.io',\n                            kind: 'Policy',\n                        }}\n                    >\n                        <FormWizardTextInput id=\"name\" label=\"Subject name\" required />\n                    </FormWizardArrayInput>\n                </FormWizardArrayInput>\n            </FormWizardSection>\n            <FormWizardSection label=\"Placement rules\" description=\"Placement rules determine which clusters a policy will be applied.\">\n                {/* <Alert variant=\"warning\" isInline title=\"Note\">\n                    Placement rules can be used by mulitple placement bindings. Editing the placement rule will affect all placement\n                    bindings using the rule.\n                </Alert> */}\n                <FormWizardArrayInput\n                    id=\"placementRules\"\n                    path={null}\n                    filter={(resource) => resource.kind === 'PlacementRule'}\n                    placeholder=\"Add placement rule\"\n                    collapsedText=\"metadata.name\"\n                    newValue={{\n                        apiVersion: 'policy.open-cluster-management.io/v1',\n                        kind: 'PlacementRule',\n                        metadata: {},\n                        spec: {\n                            clusterConditions: { status: 'True', type: 'ManagedClusterConditionAvailable' },\n                            clusterSelector: {\n                                matchExpressions: [],\n                            },\n                        },\n                    }}\n                >\n                    <FormWizardTextInput id=\"metadata.name\" label=\"Name\" required />\n                </FormWizardArrayInput>\n            </FormWizardSection>\n        </Fragment>\n    )\n}\n","import {\n    Card,\n    CardBody,\n    CardTitle,\n    Grid,\n    GridItem,\n    gridSpans,\n    Masthead,\n    MastheadBrand,\n    MastheadContent,\n    MastheadMain,\n    MastheadToggle,\n    Nav,\n    NavExpandable,\n    NavItem,\n    NavList,\n    Page,\n    PageSection,\n    PageSidebar,\n    PageToggleButton,\n    Split,\n    Stack,\n    Text,\n    Title,\n} from '@patternfly/react-core'\nimport { BarsIcon, GithubIcon, HatWizardIcon } from '@patternfly/react-icons'\nimport useResizeObserver from '@react-hook/resize-observer'\nimport { Children, ReactNode, useLayoutEffect, useRef, useState } from 'react'\nimport { BrowserRouter, Link, useHistory, useLocation } from 'react-router-dom'\nimport { AnsibleExample } from './Ansible/AnsibleExample'\nimport { AppForm } from './Application/AppForm'\nimport { ClusterForm } from './Cluster/ClusterForm'\nimport { ResultYaml } from './components/Results'\nimport { CredentialsForm } from './Credentials/CredentialsForm'\nimport { InputsWizard } from './Inputs/InputsWizard'\nimport { PolicyWizard } from './Policy/PolicyForm'\nimport { RouteE } from './Routes'\n\ninterface IWizard {\n    shortName: string\n    name: string\n    description?: string\n    route: RouteE\n}\n\nconst wizards: IWizard[] = [\n    {\n        shortName: 'Ansible',\n        name: 'Ansible automation template',\n        route: RouteE.Ansible,\n        description: 'Cluster management uses Ansible automation templates to run ansible jobs during cluster provisioning and upgrade.',\n    },\n    {\n        shortName: 'Application',\n        name: 'Application',\n        route: RouteE.Application,\n        description: 'Create an ACM application or a ArgoCD application.',\n    },\n    {\n        shortName: 'Cluster',\n        name: 'Cluster',\n        route: RouteE.Cluster,\n        description: 'Create a kubernetes cluster.',\n    },\n    {\n        shortName: 'Credentials',\n        name: 'Credentials',\n        route: RouteE.Credentials,\n        description: 'Add credentials for cloud providers or other external automation. Credentials are stored as Kubernetes secrets.',\n    },\n    {\n        shortName: 'Policy',\n        name: 'Policy',\n        route: RouteE.Policy,\n        description: 'Create a policy.',\n    },\n    {\n        shortName: 'Inputs',\n        name: 'Inputs example',\n        route: RouteE.Inputs,\n        description: 'Wizard showing the different types of inputs supported by the form wizard framework.',\n    },\n]\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Page\n                header={<AppHeader />}\n                sidebar={<AppSidebar />}\n                isManagedSidebar\n                defaultManagedSidebarIsOpen={true}\n                style={{ height: '100vh' }}\n            >\n                <AppMain />\n            </Page>\n        </BrowserRouter>\n    )\n}\nexport function AppMain() {\n    const location = useLocation()\n    switch (location.search) {\n        case RouteE.Ansible:\n            return <AnsibleExample />\n        case RouteE.Application:\n            return <AppForm />\n        case RouteE.Cluster:\n            return <ClusterForm />\n        case RouteE.Credentials:\n            return <CredentialsForm />\n        case RouteE.Policy:\n            return <PolicyWizard />\n        case RouteE.Inputs:\n            return <InputsWizard />\n        case RouteE.Results:\n            return <ResultYaml />\n        default:\n            return <AppHome />\n    }\n}\n\nfunction AppHome() {\n    return (\n        <Page\n            additionalGroupedContent={\n                <PageSection variant=\"light\">\n                    <Title headingLevel=\"h2\">PatternFly Labs - React Form Wizard</Title>\n                    <Text>Example wizards</Text>\n                </PageSection>\n            }\n            groupProps={{ sticky: 'top' }}\n        >\n            <PageSection>\n                <Masonry size={600}>\n                    {wizards.map((wizard, index) => (\n                        <AppCard key={index} title={`${wizard.name} wizard`} route={wizard.route}>\n                            {wizard.description}\n                        </AppCard>\n                    ))}\n                </Masonry>\n            </PageSection>\n        </Page>\n    )\n}\n\nfunction AppHeader() {\n    return (\n        <Masthead>\n            <MastheadToggle>\n                <PageToggleButton variant=\"plain\" aria-label=\"Global navigation\">\n                    <BarsIcon />\n                </PageToggleButton>\n            </MastheadToggle>\n            <MastheadMain>\n                <MastheadBrand>\n                    <div style={{ display: 'flex', gap: 8, alignItems: 'start' }}>\n                        <svg width=\"45\" height=\"40.5\" viewBox=\"0 0 30 27\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <defs>\n                                <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"prefix__a\">\n                                    <stop stopColor=\"#7DC3E8\" stopOpacity=\".6\" offset=\"0%\" />\n                                    <stop stopColor=\"#007BBA\" offset=\"100%\" />\n                                </linearGradient>\n                            </defs>\n                            <path\n                                d=\"M29.305 13.607L14.803.092 14.696 0l-.136.092L.087 13.607 0 13.69l.068.092 5.756 7.789.058.074h.097l4.3-.925 4.281 5.716.117.158.116-.158 4.3-5.753 4.29.925h.098l.058-.074 5.766-7.789.068-.092-.068-.046zm-8.31 1.563l.506 1.082-2.718 3.626-1.204-.259 3.417-4.449zm.166-1.425l-5.077-10.97L23.22 11.1l-2.058 2.645zm1.165 2.655l.048-.065v-.074l-.815-1.757 2.553-3.404h.058l-.068-.083-5.145-6.004 9.455 8.806L26.47 16.4l-3.32 4.486-3.6-.786 2.776-3.7zm-10.057 3.848l2.398 3.127.126.166.117-.166 2.213-3.127 1.194.268-3.62 4.847-3.622-4.847 1.194-.268zm.602-.425l1.825-16.937 1.806 16.937-1.748 2.47-1.883-2.47zm.97-16.475l-1.717 15.466-3.388-4.393 5.106-11.073zM6.175 11.1l7.144-8.325-5.087 10.97L6.174 11.1zm4.26-6.105L5.29 10.998l-.068.102.068.083 2.592 3.367-.815 1.758v.138L9.794 20.1l-3.591.786L.97 13.773l9.464-8.778zm1.38 14.652l-1.204.259L7.9 16.252l.495-1.082 3.417 4.477zM15.53 3.348l5.115 11.1-3.378 4.394-1.737-15.494z\"\n                                fill=\"url(#prefix__a)\"\n                            />\n                        </svg>\n                        <div style={{ color: 'white' }}>\n                            <Title headingLevel=\"h4\" style={{ fontWeight: 'bold', lineHeight: 1.3 }}>\n                                PatternFly Labs\n                            </Title>\n                            <Title headingLevel=\"h3\" style={{ fontWeight: 'lighter', lineHeight: 1.3 }}>\n                                React Form Wizard\n                            </Title>\n                        </div>\n                    </div>\n                </MastheadBrand>\n            </MastheadMain>\n            <MastheadContent>\n                <span style={{ flexGrow: 1 }} />\n                <a href=\"https://github.com/patternfly-labs/react-form-wizard\" style={{ color: 'white' }}>\n                    <GithubIcon size=\"xl\" />\n                </a>\n            </MastheadContent>\n        </Masthead>\n        // <PageHeader\n        //     logo={\n        //         <div style={{ display: 'flex', gap: 8, alignItems: 'start' }}>\n        // <svg width=\"45\" height=\"40.5\" viewBox=\"0 0 30 27\" xmlns=\"http://www.w3.org/2000/svg\">\n        //     <defs>\n        //         <linearGradient x1=\"50%\" y1=\"0%\" x2=\"50%\" y2=\"100%\" id=\"prefix__a\">\n        //             <stop stopColor=\"#7DC3E8\" stopOpacity=\".6\" offset=\"0%\" />\n        //             <stop stopColor=\"#007BBA\" offset=\"100%\" />\n        //         </linearGradient>\n        //     </defs>\n        //     <path\n        //         d=\"M29.305 13.607L14.803.092 14.696 0l-.136.092L.087 13.607 0 13.69l.068.092 5.756 7.789.058.074h.097l4.3-.925 4.281 5.716.117.158.116-.158 4.3-5.753 4.29.925h.098l.058-.074 5.766-7.789.068-.092-.068-.046zm-8.31 1.563l.506 1.082-2.718 3.626-1.204-.259 3.417-4.449zm.166-1.425l-5.077-10.97L23.22 11.1l-2.058 2.645zm1.165 2.655l.048-.065v-.074l-.815-1.757 2.553-3.404h.058l-.068-.083-5.145-6.004 9.455 8.806L26.47 16.4l-3.32 4.486-3.6-.786 2.776-3.7zm-10.057 3.848l2.398 3.127.126.166.117-.166 2.213-3.127 1.194.268-3.62 4.847-3.622-4.847 1.194-.268zm.602-.425l1.825-16.937 1.806 16.937-1.748 2.47-1.883-2.47zm.97-16.475l-1.717 15.466-3.388-4.393 5.106-11.073zM6.175 11.1l7.144-8.325-5.087 10.97L6.174 11.1zm4.26-6.105L5.29 10.998l-.068.102.068.083 2.592 3.367-.815 1.758v.138L9.794 20.1l-3.591.786L.97 13.773l9.464-8.778zm1.38 14.652l-1.204.259L7.9 16.252l.495-1.082 3.417 4.477zM15.53 3.348l5.115 11.1-3.378 4.394-1.737-15.494z\"\n        //         fill=\"url(#prefix__a)\"\n        //     />\n        // </svg>\n        // <div style={{ color: 'white' }}>\n        //     <Title headingLevel=\"h4\" style={{ fontWeight: 'bold', lineHeight: 1.3 }}>\n        //         PatternFly Labs\n        //     </Title>\n        //     <Title headingLevel=\"h3\" style={{ fontWeight: 'lighter', lineHeight: 1.3 }}>\n        //         React Form Wizard\n        //     </Title>\n        // </div>\n        //         </div>\n        //     }\n        //     showNavToggle\n        //     headerTools={\n        // <a href=\"https://github.com/patternfly-labs/react-form-wizard\">\n        //     <GithubIcon size=\"xl\" />\n        // </a>\n        //     }\n        // />\n    )\n}\n\nfunction AppSidebar() {\n    const location = useLocation()\n\n    return (\n        <PageSidebar\n            nav={\n                <Nav>\n                    <NavList>\n                        <NavItem isActive={location.search === ''}>\n                            <Link to={RouteE.Home}>Home</Link>\n                        </NavItem>\n                        <NavExpandable title=\"Example Wizards\" isExpanded={true}>\n                            {wizards.map((wizard, index) => (\n                                <NavItem key={index} isActive={location.search === wizard.route}>\n                                    <Link to={wizard.route}>{wizard.shortName}</Link>\n                                </NavItem>\n                            ))}\n                        </NavExpandable>\n                    </NavList>\n                </Nav>\n            }\n        />\n    )\n}\n\nfunction AppCard(props: { title?: string; children?: ReactNode; route: string }) {\n    const history = useHistory()\n    return (\n        <Card isRounded isHoverable onClick={() => history.push(props.route)}>\n            {props.title && (\n                <CardTitle>\n                    <Split hasGutter>\n                        <HatWizardIcon size=\"md\" />\n                        <span>{props.title}</span>\n                    </Split>\n                </CardTitle>\n            )}\n            {props.children && <CardBody>{props.children}</CardBody>}\n        </Card>\n    )\n}\n\nfunction Masonry(props: { size: number; children?: ReactNode }) {\n    const target = useRef(null)\n    const [columns, setColumns] = useState(2)\n    useResizeObserver(target, (entry) => {\n        setColumns(Math.max(Math.floor(entry.contentRect.width / props.size), 1))\n    })\n    const [span, setSpan] = useState<gridSpans>(2)\n    useLayoutEffect(() => {\n        switch (columns) {\n            case 1:\n                setSpan(12)\n                break\n            case 2:\n                setSpan(6)\n                break\n            case 3:\n                setSpan(4)\n                break\n            case 4:\n                setSpan(3)\n                break\n            case 5:\n                setSpan(2)\n                break\n            case 6:\n                setSpan(2)\n                break\n            default:\n                setSpan(1)\n                break\n        }\n    }, [columns])\n\n    const realColumns = 12 / span\n\n    return (\n        <div ref={target}>\n            <Grid hasGutter>\n                {new Array(realColumns).fill(0).map((_, index) => (\n                    <GridItem span={span} key={index}>\n                        <Stack hasGutter>\n                            {Children.toArray(props.children)\n                                .filter((_, i) => (i - index) % realColumns === 0)\n                                .map((child) => child)}\n                        </Stack>\n                    </GridItem>\n                ))}\n            </Grid>\n        </div>\n    )\n}\n"],"names":["RouteE","InputMode","InputEditMode","YamlHighlighter","props","yaml","split","map","line","index","style","color","parts","Fragment","length","FormWizardContext","createContext","updateContext","mode","Wizard","editMode","Create","showValidation","setShowValidation","FormWizardItemContext","useInputValue","defaultValue","item","useContext","formWizardContext","path","id","value","inputSetValue","useInputValidation","inputGetValue","error","validated","required","label","validation","undefined","useInputHidden","hidden","isFormWizardHiddenProps","result","children","allChildrenHidden","Children","child","isValidElement","hasValidationErrorsProps","anyChildrenHasValidationErrors","inputHasValue","Array","isArray","anyChildHasValue","lowercaseFirst","toLowerCase","substr","FormWizardPage","template","useState","data","setData","defaultData","devMode","setDevMode","isForm","setIsForm","drawerExpanded","setDrawerExpanded","localStorage","getItem","toggleDrawerExpanded","useCallback","setItem","toString","Form","Page","breadcrumb","Breadcrumb","crumb","BreadcrumbItem","to","isBreadcrumbGrouped","additionalGroupedContent","PageSection","variant","Flex","alignItems","default","wrap","flexWrap","gap","Title","headingLevel","title","Switch","isChecked","onChange","description","Text","component","groupProps","sticky","Drawer","isExpanded","isInline","DrawerContent","panelContent","FormWizardPageDrawer","templateString","DrawerContentBody","height","type","isWidthLimited","Provider","JSON","parse","stringify","onSubmit","FormWizardWizardMode","FormWizardFormMode","activeKey","setActiveKey","DrawerPanelContent","isResizable","colorVariant","defaultSize","Tabs","onSelect","_event","tabIndex","isBox","isFilled","backgroundColor","Tab","eventKey","TabTitleText","T","ActionGroup","Stack","hasGutter","width","ActionList","ActionListGroup","ActionListItem","Button","steps","formHasValidationErrors","FormWizardStep","push","name","Split","SplitItem","FormAlert","paddingBottom","Alert","isPlain","FormWizardDetailsMode","nextButtonText","enableNext","stepChange","step","onNext","onGoToStep","onSave","Details","DescriptionList","isHorizontal","arg1","arg2","options","fn","this","inverse","FormWizardLabelHelp","labelHelp","Popover","headerContent","labelHelpTitle","bodyContent","onClick","e","preventDefault","className","noVerticalAlign","FormWizardSection","prompt","isCompact","paddingLeft","paddingRight","FormSection","FormWizardFieldGroup","header","setIsExpanded","toggleAriaLabel","extraProps","InternalFormFieldGroup","isExpandable","onToggle","FormWizardArrayInput","collapsed","setCollapsed","sourceArray","values","filter","addItem","newItem","newArray","preservePaths","DataList","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","collapsedText","FormWizardTextDetail","collapsedDescription","DescriptionListDescription","marginBottom","Divider","expanded","FormFieldGroupHeader","titleText","text","titleDescription","actions","sortable","isDisabled","temp","splice","indexOf","display","marginTop","dropdownItems","Dropdown2","placeholder","DropdownItem","action","isSmall","newValue","open","setOpen","Dropdown","toggle","DropdownToggle","toggleIndicator","isOpen","FormWizardIndented","FormWizardCheckbox","FormGroup","fieldId","helperTextInvalid","helperText","Checkbox","FormWizardHidden","FormWizardKeyValue","pairs","Object","keys","key","flexDirection","rowGap","ChipGroup","pair","Chip","isReadOnly","gridTemplateColumns","columnGap","TextInput","newKey","reduce","onKeyChange","onValueChange","onDeleteKey","FormWizardLabels","selections","v","DescriptionListGroup","DescriptionListTerm","LabelGroup","isRequired","labelIcon","Select","event","onClear","placeholderText","isCreatable","onCreateOption","slice","join","option","SelectOption","RadioGroupContext","FormWizardRadioGroup","state","setValue","readonly","disabled","selectedChild","FormWizardRadio","radioGroupContext","readOnly","FormWizardInputLabel","FormWizardSelectVariant","FormWizardSelect","FormWizardSelectBase","FormWizardMultiselect","keyPath","selectOptions","useMemo","keyedValue","Error","icon","compareTo","valueKey","selectOption","find","_","selectOptionObject","newValues","includes","isGrouped","onFilter","hasInlineFilter","footer","numChips","selection","FormWizardSelector","i","selectKey","selectValue","FormWizardStringArray","unmap","opacity","ClearInputButton","PasteInputButton","setShowSecrets","navigator","clipboard","readText","then","ShowSecretsButton","showSecrets","FormWizardTextInput","InputGroup","secret","FormWizardTiles","Gallery","FormWizardTile","context","Tile","isSelected","isDisplayLarge","isStacked","FormWizardTimeRange","TimePicker","AnsibleWizard","apiVersion","kind","credentials","AnsibleWizardJobTemplate","AnsibleExample","history","sessionStorage","Results","Promise","resolve","_g","_path","_path2","_path3","_path4","_path5","_path6","_path7","_path8","_path9","_path10","_path11","_path12","_path13","_path14","_path15","_path16","_path17","_path18","_path19","_path20","_path21","_extends","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","xmlns","viewBox","fill","d","AppForm","namespaces","reconcileOptions","reconcileRates","servers","requeueTimes","urls","urlOptions","ansibleCredentials","App","curlyServer","curlyName","SubscriptionIcon","ArgoIcon","deployType","HelmIcon","ObjectStore","repositoryType","Placement","labelOptions","DeploymentWindow","TimeWindow","end","ClusterForm","provider","awsRegions","ControlPlaneStep","WorkerPoolsStep","useProxy","AWSmasterInstanceTypes","instanceType","ResultYaml","copied","setCopied","results","message","Home","padding","CodeBlock","CodeBlockAction","ClipboardCopyButton","textId","writeText","setTimeout","exitDelay","maxWidth","CredentialsForm","metadata","namespace","labels","credentialsType","InputsWizard","Specifications","specification","PolicyWizard","spec","remediationAction","clusterConditions","status","clusterSelector","matchExpressions","placementRef","apiGroup","subjects","PolicyWizardSpecification","PolicyWizardPlacement","trim","policy","group","existingValue","addValue","concat","array","replacements","policyTemplates","objectDefinition","namespaceSelector","resource","wizards","shortName","route","Ansible","Application","Cluster","Credentials","Policy","Inputs","AppHeader","sidebar","AppSidebar","isManagedSidebar","defaultManagedSidebarIsOpen","AppMain","search","AppHome","Masonry","size","wizard","AppCard","Masthead","MastheadToggle","PageToggleButton","MastheadMain","MastheadBrand","x1","y1","x2","y2","stopColor","stopOpacity","offset","fontWeight","lineHeight","MastheadContent","flexGrow","href","location","PageSidebar","nav","Nav","NavList","NavItem","isActive","NavExpandable","Card","isRounded","isHoverable","CardTitle","CardBody","useRef","columns","setColumns","entry","Math","max","floor","contentRect","span","setSpan","useLayoutEffect","realColumns","ref","Grid","GridItem"],"sourceRoot":""}